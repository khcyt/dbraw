const kh_global=Function("return globalThis;")()||Function("return this;")()||Function("return self;")();const as_module=undefined==this;const asWorker="undefined"===typeof window&&"undefined"===typeof process&&self;const cf="kh_cmdline";const mf="kh_cmdline_esm";kh_global.kh??={};kh_global.kh.context??="undefined"!==typeof window?kh_global.parent==kh_global?"window":"iframe":"undefined"!==typeof process?"node.js":"undefined"!==typeof self?self.name??"worker":"unknown";kh_global.kh.storage??={};const cs=kh_global.kh.storage[cf]??={cf,ms:new Set};const ms=kh_global.kh.storage[mf]??={mf,cs};cs.ms.add(ms);import{isEmpty,isString,isPlainObject}from"/contrib/jsm/kh_earlybird.js";import{StringMap}from"/contrib/jsm/kh_classes.js";const name=MF`${mf}`;const print_level=undefined;import{Logger}from"/contrib/jsm/kh_log.js";const kh_log=new Logger(print_level,()=>name);const{default:minimist}=await import("minimist");kh_global.LoadedScripts.get(mf).resolve(ms);export class Options{constructor(options){this.addEntries(options)}addEntries(further){Object.assign(this,further);const othis=this;Object.entries(this).forEach(([key,value])=>{if(!isString(value)&&!Function.isFunction(value.setAsEnv)){value.setAsEnv=function(env_val=othis.get_arg(key)){process.env[key.toUpperCase().replaceAll("-","_")]=env_val}}});return this}get_opt(key){return Options.get_opt(key,this[key])}get_arg(key,or_def=true){return this.argz?.()?.[this.get_opt(key)]??(or_def?this[key].def:undefined)}get opts(){return Object.fromEntries(Object.entries(this).map(([key,value])=>[key,Options.get_opt(key,value)]))}get strings(){return Object.fromEntries(Object.entries(this).map(([key,value])=>[Options.get_opt(key,value),value.hlp]).filter(([opt,hlp])=>!isEmpty(opt)&&!isEmpty(hlp)))}afterLocale(){Object.entries(this).forEach(([key,value])=>{StringMap.getGlobalMap().afterLocale.apply(this[key])})}print_help(only_option){if(!isEmpty(only_option)&&true!==only_option){kh_log.info?.(T9`${U`${"command-line-argz"} ${'"'+only_option+'"'} => ${only_option}`}`)}else{kh_log.info?.(T9`${process.argv[0]} --op='Operation' ...options`);kh_log.info?.(T9`${U`${"allowed-opts"} =>`}`);Object.entries(this).forEach(([option,value])=>{kh_log.info?.(T9`${U`${"command-line-argz"} ${'"'+Options.get_opt(option,value)+'"'} => ${Options.get_opt(option,value)}`}`)})}}static get_opt(key,value){return value.opt??(isPlainObject(value)?key:value)}}export function buildOptions(argz=minimist(process.argv.slice(2))){const options=new class extends Options{constructor(options){super(options)}argz(){return argz}}({op:{opt:"op",hlp:{de:`Vorgabe der auszuführen Operation (z. B. prepare-html)`,en:`set operation (i. e. prepare-html)`}},from:{hlp:{de:`Vorgabe der Eingabedatei`,en:`set input file`}},to:{hlp:{de:`Vorgabe der Ausgabedatei oder des -pfades`,en:`set output file or directory`}},force_overwrite:{opt:"fo",def:false,hlp:{de:`auf true setzen, wenn eine existierende Datei überschrieben werden kann (Standard false)`,en:`set true, if exists file can overwrite (default false)`}},lang:{def:Intl.DateTimeFormat().resolvedOptions().locale,hlp:{de:`Setzt die Sprache der ausgegebenen Meldungen (Standard:${JSON.stringify(Intl.DateTimeFormat().resolvedOptions().locale)})`,en:`set language for output messages (default:${JSON.stringify(Intl.DateTimeFormat().resolvedOptions().locale)})`}},help:{hlp:{de:`Zeigt Hilfeinformationen zu allen Optionen. Geben Sie --help 'option' an, um die Hilfe nur für eine Option anzuzeigen.`,en:`Shows help information for all options. Enter --help 'option' to show help information only for one option.`}}});return options}