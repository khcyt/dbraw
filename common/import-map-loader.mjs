import*as path from"node:path";import*as fs from"node:fs";let z=0;export async function resolve(specifier,context,nextResolve){if(undefined==globalThis.kh_imports&&3>=++z){try{const cwd=process.cwd().replaceAll("\\","/")+"/";console.log("cwd",cwd);let common_path=import.meta.url.replaceAll("\\","/");let pos=common_path.lastIndexOf("/");common_path=common_path.substring(0,pos+1);let kh_own_path;try{kh_own_path=path.resolve("./contrib");if(!fs.existsSync(kh_own_path))throw kh_own_path}catch(error){if(error instanceof SyntaxError)console?.error(`${error} / ${error.stack}`);kh_own_path=path.resolve(common_path.substring("file:///".length)+"../../../web");if(!fs.existsSync(kh_own_path))throw kh_own_path}kh_own_path=kh_own_path.replaceAll("\\","/");if(false){const nodi_path=import.meta.resolve("json8-merge-patch");console.log("nodiiiiiiiiiii",nodi_path)}const get_node_module_path=(await import("./get_node_module_path.cjs")).default;const node_module_path=get_node_module_path();globalThis.kh_imports??=JSON.parse(`{\n                "imports"       : {\n                            "/contrib/jsm/"         : "file:///${kh_own_path}/jsm/",\n                            "/contrib/js/"          : "file:///${kh_own_path}/js/",\n                            "/common/"              : "${common_path}",\n                            "/app/js/"              : "~./js",\n                            "/node-modules/"        : "file:///${node_module_path}/",\n                            "/cdn/"                 : "file:///${node_module_path}/",\n                            "tinyduration"          : "file:///${node_module_path}/tinyduration/dist/index.js"\n\n                    }\n            }`).imports;let json_fn="./importmap.json";let content={};if(!fs.existsSync(json_fn))json_fn=path.resolve(json_fn);if(fs.existsSync(json_fn)){let content=fs.readFileSync(json_fn,"utf-8");if(Object.prototype.toString.call(content)==="[object String]"){try{content=JSON.parse(content)}catch(error){content={}}}globalThis.kh_imports={...globalThis.kh_imports,...content.imports||{}}}console.log("~~~~",common_path,"~~~~~~~~~~~~~~~~",kh_own_path);for(const[key,value]of Object.entries(globalThis.kh_imports)){if(value.startsWith("~./"))globalThis.kh_imports[key]=`file:///${cwd}${value.substring(3)}`}}catch(error){console.log("error=",error)}}if(undefined!==globalThis.kh_imports){let match_key=undefined;for(const key in globalThis.kh_imports){if(specifier.startsWith(key)){if(key.length>(match_key?.length??0)){match_key=key}}}if(undefined!==match_key){specifier=`${globalThis.kh_imports[match_key]}${specifier.substring(match_key.length)}`}}return nextResolve(specifier,context)}