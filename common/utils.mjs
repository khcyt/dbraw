const kh_global=Function("return globalThis;")()||Function("return this;")()||Function("return self;")();const as_module=undefined==this;const asWorker="undefined"===typeof window&&"undefined"===typeof process&&self;const cf="kh_server";const mf="common_utils_esm";kh_global.kh??={};kh_global.kh.context??="undefined"!==typeof window?kh_global.parent==kh_global?"window":"iframe":"undefined"!==typeof process?"node.js":"undefined"!==typeof self?self.name??"worker":"unknown";kh_global.kh.storage??={};const cs=kh_global.kh.storage[cf]??={cf,ms:new Set};const ms=kh_global.kh.storage[mf]??={mf,cs};cs.ms.add(ms);import{isValid,isEmpty}from"/contrib/jsm/kh_earlybird.js";let print_level=undefined;import{Logger}from"/contrib/jsm/kh_log.js";const kh_log=new Logger(print_level,()=>name);const name=MF`${mf}`;import{networkInterfaces}from"node:os";export function getOwnURL(req){if(!isValid(req))return undefined;if(isValid(req.protocol))return`${req.protocol}://${req.get("host")}`;return req.headers?.["origin"]}export const get_method=req=>req?.route?.stack?.[0]?.method||req?.method?.toUpperCase()||"xfunc";export const get_method2=req=>`${get_method(req)}(${req?.route?.path})`;export const get_server_ips=(family=4)=>{let ips=[];const ifaces=networkInterfaces();Object.keys(ifaces).forEach(ifname=>{ifaces[ifname].forEach(iface=>{if(family!==iface.family&&`IPv${family}`!==iface.family||false!==iface.internal)return;ips.push({ifname,address:iface.address})})});return ips};const ip4$6="::ffff:";export const get_client_ip=(req,map2IP4=true)=>{let client_ip=req.headers["x-forwarded-for"]?.split(",").shift()||req.socket?.remoteAddress;if(map2IP4&&client_ip?.startsWith(ip4$6))client_ip=client_ip.substring(ip4$6.length);return client_ip};export const get_client_ips=(server,map2IP4=true)=>{let handles=process._getActiveHandles?.();return handles.map(handle=>handle.readable&&handle.writable&&handle.server===server?handle.remoteAddress:undefined).map(address=>map2IP4&&address?.startsWith(ip4$6)?address.substring(ip4$6.length):address).filter(address=>!isEmpty(address))};export const is_internal_request=(req,server,map2IP4=true)=>{const client_ip=get_client_ip(req,map2IP4);const index=get_client_ips(server,map2IP4)?.findIndex(cip=>client_ip==cip)??-1;return-1!=index};export async function isHttpServerRunning(timeout=5e4){const ari=process.getActiveResourcesInfo();return ari.includes("TCPServerWrap")||ari.includes("TCPWRAP")}kh_global.LoadedScripts.get(mf).resolve(ms);