const kh_global=Function("return globalThis;")()||Function("return this;")()||Function("return self;")();const as_module=undefined==this;const asWorker="undefined"===typeof kh_global.window&&"undefined"===typeof kh_global.process&&kh_global.self;const cf="kh_crypt";const mf="kh_crypt_esm";kh_global.kh??={};kh_global.kh.context??="undefined"!==typeof kh_global.window?kh_global.parent==kh_global?"window":"iframe":"undefined"!==typeof kh_global.process?"node.js":"undefined"!==typeof kh_global.self?kh_global.self.name??"worker":"unknown";kh_global.kh.storage??={};const cs=kh_global.kh.storage[cf]??={cf,ms:new Set};const ms=kh_global.kh.storage[mf]??={mf,cs};cs.ms.add(ms);import{isNode,isEmpty}from"/contrib/jsm/kh_earlybird.js";import{Error}from"/contrib/jsm/kh_classes.js";import{String2Buffer}from"/contrib/jsm/kh_functions.js";const name=MF`${mf}`;const print_level=undefined;import{Logger}from"/contrib/jsm/kh_log.js";const kh_log=new Logger(print_level,()=>name);const crypto=isNode()?await import("node:crypto"):kh_global.crypto;const subtle=crypto.subtle;export class PBKDF2{static async getKeyMaterial(password){return subtle.importKey("raw",String2Buffer(password),"PBKDF2",false,["deriveBits","deriveKey"])}static async getDerivedKey(password,salt){const keyMaterial=await PBKDF2.getKeyMaterial(password);const complex_ret=isEmpty(salt);salt??=crypto.getRandomValues(new Uint8Array(32));const key=subtle.deriveKey({name:"PBKDF2",salt,iterations:1e5,hash:"SHA-256"},keyMaterial,{name:"AES-GCM",length:256},true,["encrypt","decrypt"]);return complex_ret?{key,salt}:key}static async encrypt(plaintext,password,salt,iv){const complex_ret=isEmpty(iv)||isEmpty(salt);salt??=crypto.getRandomValues(new Uint8Array(32));iv??=crypto.getRandomValues(new Uint8Array(128));const key=await PBKDF2.getDerivedKey(password,salt);const enc=await subtle.encrypt({name:"AES-GCM",iv},key,String2Buffer(plaintext));return complex_ret?{enc,key,salt,iv}:enc}static async decrypt(encmsg,password,salt,iv){if(isEmpty(salt)||isEmpty(iv))throw new Error("param-invalid");const key=await PBKDF2.getDerivedKey(password,salt);return subtle.decrypt({name:"AES-GCM",iv},key,encmsg)}}kh_global.LoadedScripts.get(mf).resolve(ms);