"use strict";var kh_global=kh_global||Function("return globalThis;")()||Function("return this;")()||Function("return self;")();kh_global.importScripts("/contrib/js/kh_earlybird.js");kh_global.importScripts("/contrib/js/kh_log.js");kh_global.importScripts("/contrib/js/kh_io.js");function scope(){return"[ServiceWorker DBRAW]"}var log_write=write;var log_trace=trace;var log_debug=debug;var log_info=info;var log_warn=warn;var log_error=error;var log_fatal=fatal;write=function(){log_write(...arguments,scope)};trace=function(){log_trace(...arguments,scope)};debug=function(){log_debug(...arguments,scope)};info=function(){log_info(...arguments,scope)};warn=function(){log_warn(...arguments,scope)};error=function(){log_error(...arguments,scope)};fatal=function(){log_fatal(...arguments,scope)};var install_service_worker=function(policy,version,timeout,file_list,delete_old_caches){kh_global["policy-argument"]=policy;var obj="object"===typeof policy;policy=(obj?policy["policy"]:policy)||"network-or-cache";version=(obj?policy["version"]:version)||"-v1";timeout=(obj?policy["timeout"]:timeout)||1e3;file_list=(obj?policy["file-list"]:file_list)||[];delete_old_caches=(obj?policy["delete-old"]:delete_old_caches)||true;var CACHE_NAME="kh-"+policy+version;kh_log.printLevel(2);kh_global.addEventListener("install",(function(evt){trace("Installation abgeschlossen");evt.waitUntil(precache(CACHE_NAME,file_list))}));kh_global.addEventListener("activate",(function(evt){trace("Aktivierung");evt.waitUntil(caches.keys().then((function(keyList){return Promise.all(keyList.map((function(key){if(CACHE_NAME!==key){info("Lösche (veralteten) Cache",key);return caches.delete(key)}})))})));return kh_global.clients.claim()}));kh_global.addEventListener("message",(function(evt){trace("Service Worker received message:",kh_js.prettyPrint(evt.data))}));kh_global.addEventListener("fetch",(function(evt){var promise=undefined;switch(policy){case"network-or-cache":{promise=fromNetwork(evt.request,timeout,CACHE_NAME).catch((function(){return fromCache(evt.request,CACHE_NAME)}));break}case"cache-or-network":{promise=fromCache(evt.request,CACHE_NAME).catch((function(){return fromNetwork(evt.request,timeout,CACHE_NAME)}));break}case"cache-and-network":{var promise_net=undefined;promise_net=fromNetwork(evt.request,timeout,CACHE_NAME);var load_from_cache=false;promise=fromCache(evt.request,CACHE_NAME).then((function(response){load_from_cache=true;return response}),(function(fail){load_from_cache=false;return promise_net?promise_net:fromNetwork(evt.request,timeout,null)}))}}evt.respondWith(promise)}));return true}({policy:"cache-and-network","file-list":["./app.html","./img/favicon.png","./css/","./img/","./js/","./contrib/","/"],"delete-old":true});function precache(cache_name,file_list){trace("precache work with",cache_name);try{return caches.open(cache_name).then((function(cache){return addAll(cache,file_list)})).catch((function(){warn("Asynchrone Exception während der Cache-Öffnung: ",arguments[0],"--",typeof arguments[0]);return caches.delete(cache_name).then((function(){return precache(cache_name)}))}))}catch(ex){error("Exception während der Cache-Öffnung: ",ex.toString())}}function addAll(cache,file_list){trace("add files [",file_list.join(" "),"] to cache [",cache,"]");return cache.addAll(file_list)}function fromNetwork(request,timeout,cache_name){return new Promise((function(resolve,reject){return tryNetwork(resolve,reject,request,timeout,cache_name)}))}function tryNetwork(fulfill,reject,request,timeout,cache_name){var timeoutId=setTimeout(reject,timeout);if(-1!=["POST","PUT","DELETE","PATCH"].indexOf(request.method))return kh_global.fetch(request);return kh_io.Util.fetchData(request.method||"GET",request.url,request.body,{get_native:true,headers:request.headers,credentials:request.credentials,redirect:request.redirect,referrer:request.referrer}).then((function(response){var valid_response=response&&200==response.status&&"basic"==response.type;if(!valid_response){error("invalid response for",request.url,"[",response&&response.status,response&&response.type,"]");return Promise.reject({why:"Invalid response",url:response&&response.url,"status-code":response&&response.status})}clearTimeout(timeoutId);if(!kh_js.isEmpty(cache_name)){caches.open(cache_name).then((function(cache){return Promise.all([response,cache.match(request)]).then((function(values){if(2==values.length){var net_headers=values[0]&&values[0].headers;var cache_headers=values[1]&&values[1].headers;if(!net_headers||!cache_headers||net_headers.get("content-length")!=cache_headers.get("content-length")){return Promise.resolve({why:"content",response:values[0]})}var net_date=net_headers.get("last-modified");var cache_date=cache_headers.get("last-modified");if(!net_date||!cache_date||net_date>cache_date){return Promise.resolve({why:"date",response:values[0]})}return Promise.reject({why:"cache-up-to-date",url:response.url,response})}return Promise.reject({why:"Invalid data / "+values.join(),url:response.url})})).then((function(success){trace("^\n","Ergebnis für",response.url,":",kh_js.prettyPrint(success));if(success){trace("Füge ",response&&response.url,"zu Cache",cache_name,"hinzu");cache.put(request,response.clone());send_message_to_all_clients(Object.assign({what:"cache-update",url:success.response.url,why:success.why}));var info_key="kh-info-update";if(kh_global["kh-info-update"])clearTimeout(kh_global["kh-info-update"]);kh_global["kh-info-update"]=setTimeout((function(){send_message_to_all_clients({what:"should-update",why:"one-or-more-cache-updates"})}),2e3)}return success?Promise.resolve(success):Promise.reject({why:"rejected",url:response.url})})).catch((function(why){return Promise.reject(why)}))})).then((function(){})).catch((function(why){if(!(why instanceof Object)||why instanceof Error)debug(why);else trace("^\n","Keinen Eintrag vornehmen für",response.url,response.status,"(",kh_js.prettyPrint(why),")")}))}return fulfill(response.clone())}),(function(why){error("Netzwerkfehler bei",request.url,why);return reject(why)}))}function fromCache(request,cache_name){if(!request||!cache_name)return new Response("<p>Try again, if network available</p>");trace("Versuche Laden fromCache() für [cache:",cache_name,"/ URL:",request.url,"]");return caches.open(cache_name).then((function(cache){return cache.match(request).then((function(response){trace("Response für ",request.url,"?",response?"Ja":"Nein",", OK? ",true===(response&&response.ok),", URL ",response&&response.url);return response||Promise.reject("no-match")}))}))}function print_content(cocn){if(!cocn)return;var promise=kh_js.isString(cocn)?new Promise((function(resolve,reject){return caches.open(cocn).then((function(cache){return resolve(cache)}))})):cocn instanceof Cache?new Promise((function(resolve,reject){return resolve(cocn)})):Promise.reject("invalid argument");promise.then((function(cache){cache.keys().then((function(keys){trace(keys.map((function(key){return key.url})).join(" / "))}))}))}function send_message_to_client(client,msg){if(!client||!msg)return;return new Promise((function(resolve,reject){var msg_chan=new MessageChannel;msg_chan.port1.onmessage=function(event){if(event.data.error){reject(event.data.error)}else{resolve(event.data)}};trace("Sende Message an Client",kh_js.prettyPrint(msg));client.postMessage(msg,[msg_chan.port2])}))}function send_message_to_all_clients(msg){clients.matchAll().then((clients=>{clients.forEach((client=>{send_message_to_client(client,msg).then((m=>trace("message answer from",client.url,":",kh_js.prettyPrint(m))))}))}))}