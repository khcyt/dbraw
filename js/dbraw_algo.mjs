const kh_global=Function("return globalThis;")()||Function("return this;")()||Function("return self;")();const as_module=undefined==this;const asWorker="undefined"===typeof window&&"undefined"===typeof process&&self;const cf="dbraw";const mf="dbraw_algo_esm";kh_global.kh??={};kh_global.kh.context??="undefined"!==typeof window?kh_global.parent==kh_global?"window":"iframe":"undefined"!==typeof process?"node.js":"undefined"!==typeof self?self.name??"worker":"unknown";kh_global.kh.storage??={};const cs=kh_global.kh.storage[cf]??={cf,ms:new Set};const ms=kh_global.kh.storage[mf]??={mf,cs};cs.ms.add(ms);let jsm_prefix,common_prefix;kh_start_remove();if("undefined"!==typeof process){jsm_prefix=`file:///${kh_global.kh.pathes.get("own-module")}`;common_prefix=`file:///${kh_global.kh.pathes.get("common")}`}else{kh_end_remove();jsm_prefix=`/contrib/jsm`;kh_start_remove()}kh_end_remove();const kh_js={...await import(`${jsm_prefix}/kh_earlybird${VERSION}.js`),...await import(`${jsm_prefix}/kh_functions${VERSION}.js`),...await import(`${jsm_prefix}/kh_classes${VERSION}.js`)};const print_level=undefined;const{Logger}=await import(`${jsm_prefix}/kh_log${VERSION}.js`);const kh_log=new Logger(print_level,(()=>name));Object.assign(ms,await import(`./dbraw_types${VERSION}.mjs`));Object.assign(ms,await import(`./dbraw_strings${VERSION}.mjs`));const name=MF`${mf}`;let math={};kh_start_remove();const t1=kh_js.getTimestamp();if("undefined"!==typeof process){}else{kh_end_remove();kh_start_remove()}kh_end_remove();math.gcd=(num1,num2)=>{num1|=0;num2|=0;if(0===num2)return num1;return math.gcd(num2,num1%num2)};math.lcm=(num1,num2)=>{num1|=0;num2|=0;const gcd=math.gcd(num1,num2);return num1*num2/gcd};const enforceNumber=mask=>{let ret=kh_js.isNumber(mask)?mask:Number.parseInt(mask,16);if(isNaN(ret))debugger;return ret};const getBoatMaskFromMask=mask=>(enforceNumber(mask)&15)>>>0;const getLeagueMaskFromMask=mask=>enforceNumber(mask)>>>4<<4;const getBoatIndexFromMask=mask=>Math.log2(getBoatMaskFromMask(mask))>>>0;const getLeagueIndexFromMask=mask=>Math.log2(getLeagueMaskFromMask(mask))-4>>>0;const getBoatMaskFromIndex=index=>(1<<index&15)>>>0;const getLeagueMaskFromIndex=index=>1<<index+4>>>0;export function getCompetitionNameFromMask(event_data,mask){event_data=event_data||kh_global.kh.storage["dbraw"].jo_cur_event;if(!kh_js.isValid(event_data))throw new ms.Error("param-not-determined","event_data");return getBoatNameFromMask(event_data,mask)+" "+event_data.categories.league[getLeagueIndexFromMask(mask)]}export function getBoatNameFromMask(event_data,mask){event_data=event_data||kh_global.kh.storage["dbraw"].jo_cur_event;if(!kh_js.isValid(event_data))throw new ms.Error("param-not-determined","event_data");const boat_name=event_data.categories.boat[getBoatIndexFromMask(mask)];return ms.unzipProp(boat_name)||boat_name}export function getCompetitionAliasFromMask(event_data,mask){event_data=event_data||kh_global.kh.storage["dbraw"].jo_cur_event;if(!kh_js.isValid(event_data))throw new ms.Error("param-not-determined","event_data");let entry=(event_data.categories.aliases||[]).find((val=>val.hasOwnProperty(mask)));return entry&&entry[mask]}export function setCompetitionAliasFromMask(event_data,mask,name){event_data=event_data||kh_global.kh.storage["dbraw"].jo_cur_event;if(!kh_js.isValid(event_data))throw new ms.Error("param-not-determined","event_data");event_data.categories.aliases??=[];const index=event_data.categories.aliases.findIndex((val=>val.hasOwnProperty(mask)));if(-1==index){if(kh_js.isEmpty(name))return;else event_data.categories.aliases.push({[mask]:name})}else{if(kh_js.isEmpty(name))event_data.categories.aliases.splice(index,1);else event_data.categories.aliases[index]={[mask]:name}}}export function prepareForerunData(event_data){if(!kh_js.isValid(event_data))return;event_data.foreruns||=[];event_data.foreruns=event_data.foreruns.map((forerun$series=>forerun$series?.map((forerun$series$heatno=>forerun$series$heatno?.map((forerun$series$heatno$trackno=>{if(kh_js.isValid(forerun$series$heatno$trackno)){try{forerun$series$heatno$trackno.name=()=>event_data.teams.findByNo(forerun$series$heatno$trackno.no).name(forerun$series$heatno$trackno.cat);forerun$series$heatno$trackno.time=new RaceTime(forerun$series$heatno$trackno.time)}catch(error){forerun$series$heatno$trackno=undefined;kh_log.error?.(T9`invalid data in prepareForerunData() => ${error}`)}}return forerun$series$heatno$trackno})).filter(kh_js.isValid))).filter(kh_js.isValid))).filter(kh_js.isValid)}export function prepareFinalrunData(event_data){if(!kh_js.isValid(event_data))return;event_data.finalruns=event_data.finalruns||[];event_data.finalruns=event_data.finalruns.map((finalrun$heatno=>finalrun$heatno?.map((finalrun$heatno$trackno=>{if(kh_js.isValid(finalrun$heatno$trackno)){try{finalrun$heatno$trackno.name=()=>event_data.teams.findByNo(finalrun$heatno$trackno.no).name(finalrun$heatno$trackno.cat);finalrun$heatno$trackno.time=new RaceTime(finalrun$heatno$trackno.time)}catch(error){finalrun$heatno$trackno=undefined;kh_log.error?.(T9`invalid data in prepareFinalrunData() => ${error}`)}}return finalrun$heatno$trackno})).filter(kh_js.isValid))).filter(kh_js.isValid)}export function prepareOneEvent(event_data,global_paramz={}){event_data.paramz=Object.assign({},global_paramz,event_data.paramz||{});event_data.timetable||=[];event_data.timetable=event_data.timetable.map((tte=>tte instanceof TimeTableEntry?tte:new TimeTableEntry(tte)));event_data.teams=Team.getTeamList(event_data.teams||[],0,true,false);prepareForerunData(event_data);prepareFinalrunData(event_data)}export function prepareData(data){data=JSON.parse(JSON.stringify(data));if(!kh_js.isValid(data.events))prepareOneEvent(data);else{kh_js.for_in(data.events,((key,value)=>{if(!isNaN(Number.parseInt(key))){prepareOneEvent(data.events[key],data.events.paramz)}}))}return data}kh_start_remove();export function generateForerunList(event_data,min_per_cat=1,random_list=false){if(!kh_js.isValid(event_data))throw new ms.Error("param-not-determined","event_data");let holded_competition=event_data.categories["holded-competition"];if(kh_js.isEmpty(holded_competition))throw new ms.Error("invalid-argument","h-c");let team_list=Team.getTeamList(event_data);let n_forerun=event_data.paramz.n_forerun;let n_bpr=event_data.paramz.n_boats_per_race;let rotate_list_left=[...Array(holded_competition.length)].map(((v,i)=>0));let rotate_list_rigth=[...rotate_list_left];let holded_competition2=[...Array(holded_competition.length)].map(((v,i)=>[holded_competition[i]]));let starterfeld_cat=[...Array(holded_competition.length)].map(((v,i)=>Team.getTeamList(team_list,holded_competition[i])));for(let i_cat=0;i_cat<holded_competition.length;++i_cat){if(min_per_cat>starterfeld_cat[i_cat].length||1==starterfeld_cat[i_cat].length){if(0==starterfeld_cat[i_cat].length){holded_competition2[i_cat]=[]}else{let i_cat2=holded_competition.findIndex(((e,i)=>i_cat!=i&&0!=starterfeld_cat[i].length&&getBoatIndexFromMask(holded_competition[i_cat])==getBoatIndexFromMask(holded_competition[i])));if(-1==i_cat2)i_cat2=holded_competition.findIndex(((e,i)=>i_cat!=i&&0!=starterfeld_cat[i].length&&getLeagueIndexFromMask(holded_competition[i_cat])==getLeagueIndexFromMask(holded_competition[i])));if(-1==i_cat2){if(2<holded_competition.length)i_cat2=(i_cat+2)%holded_competition.length;else i_cat2=(i_cat+1)%holded_competition.length}if(-1!=i_cat2){let i_cat_stay=Math.min(i_cat,i_cat2),i_cat_delete=Math.max(i_cat,i_cat2);starterfeld_cat[i_cat_stay]=[...starterfeld_cat[i_cat2],...starterfeld_cat[i_cat]];starterfeld_cat[i_cat_delete]=[];holded_competition2[i_cat_stay]=[...holded_competition2[i_cat2],...holded_competition2[i_cat]];holded_competition2[i_cat_delete]=[];++rotate_list_left[i_cat_stay];rotate_list_left.splice(i_cat_delete,1)}}}}holded_competition2=holded_competition2.filter((hC2=>!kh_js.isEmpty(hC2)));holded_competition2.indexOf=cat=>holded_competition2.findIndex(((v,i)=>-1!=v.indexOf(cat)));let starterfeld=[...Array(n_forerun)].map((()=>[...Array(holded_competition2.length)].map((()=>[...Array(n_bpr)].map((()=>[]))))));let start_index_track=[...Array(holded_competition2.length)].map(((v,i)=>i%n_bpr));team_list.forEach((team=>{(team.tstAdjacent(holded_competition2)||[]).forEach((adj_idx=>++rotate_list_left[adj_idx]));team.cat.forEach((cat=>{let team_entry={no:team.no,name:team.name(cat),cat};let i_cat=holded_competition2.indexOf(cat);if(-1!=i_cat){let sit=start_index_track[i_cat];for(let i_forerun=0;i_forerun<n_forerun;++i_forerun){let start_entry={...team_entry,seriesno:i_forerun};starterfeld[i_forerun][i_cat][sit++%n_bpr].push(start_entry)}start_index_track[i_cat]=(start_index_track[i_cat]+1)%n_bpr}}))}));starterfeld.forEach(((starterfeld$forerun,i_forerun)=>starterfeld$forerun.forEach(((starterfeld$forerun$cat,i_cat)=>starterfeld$forerun$cat.forEach(((starterfeld$forerun$cat$track,i_track)=>{if(random_list)starterfeld$forerun$cat$track=kh_js.shuffle_array(starterfeld$forerun$cat$track);else{switch(i_track%3){case 0:starterfeld$forerun$cat$track.rotate(rotate_list_left[i_cat]);break;case 1:starterfeld$forerun$cat$track.rotate(-(rotate_list_left[i_cat]+1+(0==starterfeld_cat[i_cat].length%2?i_forerun:0))/2);break;case 2:break}}}))))));if(2==n_bpr){let n_adjust=0;for(let i_forerun=0;i_forerun<starterfeld.length;i_forerun+=2){for(let i_cat=0;i_cat<holded_competition2.length;++i_cat){let n_teams_per_cat=starterfeld[i_forerun][i_cat].map((start_list=>start_list.length));if(!n_teams_per_cat.every((v=>v===n_teams_per_cat[0]))){adjustStartList(starterfeld[i_forerun][i_cat],starterfeld[i_forerun+1][i_cat],team_list)}}}}let run_list=generateRunList(starterfeld[0],holded_competition2);if(kh_js.isEmpty(run_list))return undefined;let foreruns=[...starterfeld.map(((starterfeld$forerun,i_forerun)=>[]))];let convertTeam4ForerunList=(starterfeld$forerun$cat$track,fifo)=>{let team=fifo?starterfeld$forerun$cat$track.shift():starterfeld$forerun$cat$track.pop();if(!team)return team;team.name=()=>team_list.findByNo(team.no).name(team.cat);team.time=new RaceTime;return team};for(let i_forerun=0;i_forerun<starterfeld.length;++i_forerun){let heats_with_teams_movedforward=[...Array(holded_competition2.length)];for(let i_cat=0;i_cat<holded_competition2.length;++i_cat){let starterfeld$forerun$cat=starterfeld[i_forerun][i_cat];let last_index=!kh_js.isEmpty(starterfeld$forerun$cat)&&!kh_js.isEmpty(starterfeld$forerun$cat[0])?starterfeld$forerun$cat[0].length-1:-1;let must_fill=-1!=last_index&&-1!=starterfeld$forerun$cat.findIndex((starterfeld$forerun$cat$track=>starterfeld$forerun$cat$track[last_index]&&starterfeld$forerun$cat$track[last_index].seriesno!=i_forerun));if(must_fill){heats_with_teams_movedforward[i_cat]=starterfeld$forerun$cat.map(kh_js.bind2nd(convertTeam4ForerunList,false))}}let i_runlist=0;let safety=0;while(true&&++safety<1e3){let cat=run_list[i_runlist++%run_list.length];let icat=holded_competition2.indexOf(cat);if(0!=starterfeld[i_forerun][icat].length){let teams_in_race=starterfeld[i_forerun][icat].map(kh_js.bind2nd(convertTeam4ForerunList,true));if(!teams_in_race.every((team=>!team)))foreruns[i_forerun].push(teams_in_race);if(starterfeld[i_forerun].every((starterfeld$forerun$cat=>starterfeld$forerun$cat.every((starterfeld$forerun$cat$track=>0==starterfeld$forerun$cat$track.length)))))break}}for(let i_cat=0;i_cat<holded_competition2.length;++i_cat)if(heats_with_teams_movedforward[i_cat])foreruns[i_forerun].push(heats_with_teams_movedforward[i_cat])}return foreruns}export function adjustStartList(start_list_a,start_list_b,team_list){let n_teams_a=start_list_a.map(((start_list,idx)=>({length:start_list.length,idx})));const must=!n_teams_a.every((v=>v.length===n_teams_a[0].length));let n_teams_b=start_list_b.map(((start_list,idx)=>({length:start_list.length,idx})));const can=!n_teams_b.every((v=>v.length===n_teams_b[0].length));if(!must||!can)return false;const max_teams_a=Math.max(...n_teams_a.map((v=>v.length)));const min_teams_b=Math.min(...n_teams_b.map((v=>v.length)));let tracks_a=new Map;n_teams_a.forEach((o=>tracks_a.set(o.length,[...tracks_a.get(o.length)||[],o.idx])));tracks_a=[...tracks_a.entries()].sort(((kv1,kv2)=>kv1[0]-kv2[0])).map((kv=>({length:kv[0],idx:kv[1]})));let tracks_b=new Map;n_teams_b.forEach((o=>tracks_b.set(o.length,[...tracks_b.get(o.length)||[],o.idx])));tracks_b=[...tracks_b.entries()].sort(((kv1,kv2)=>kv2[0]-kv1[0])).map((kv=>({length:kv[0],idx:kv[1]})));for(let a=0;a<tracks_a.length-1;++a){let have_to_find=tracks_a[a+1].length-tracks_a[a].length;while(0<have_to_find){let race_index=start_list_a[tracks_a[a].idx[0]].length;let race_view=start_list_a.map((start_list=>start_list[race_index]));let cat=2==race_view.length?race_view.find((v=>v)).cat:undefined;const not_in_rv=team=>-1==race_view.findIndex((v=>v&&v.no==team.no));let select_methods=[start_list=>start_list.findIndex((team=>(cat==undefined||cat==team.cat)&&1==team_list.findByNo(team.no).cat.size&&not_in_rv(team))),start_list=>start_list.findIndex((team=>1==team_list.findByNo(team.no).cat.size&&not_in_rv(team))),start_list=>start_list.findIndex((team=>(cat==undefined||cat==team.cat)&&not_in_rv(team))),start_list=>start_list.findIndex((team=>not_in_rv(team)))];tracks_a[a].idx.forEach((trackno_a=>{let found=false;for(let b=0;b<tracks_b.length-1;++b){for(let b2=0;b2<tracks_b[b].idx.length;++b2){const trackno_b=tracks_b[b].idx[b2];found=select_methods.find((sm=>{let idx_in_b=sm(start_list_b[trackno_b]);if(-1!=idx_in_b){race_view[trackno_a]=start_list_b[trackno_b][idx_in_b];start_list_a[trackno_a].push(start_list_b[trackno_b][idx_in_b]);start_list_b[trackno_b].splice(idx_in_b,1);return true}return false}))}if(found)break}}));--have_to_find}tracks_a[a+1].idx=[...tracks_a[a].idx,...tracks_a[a+1].idx]}}export function generateRunList(start_list,holded_competition){let pro_bk=[],pro_lk=[],pro_hc=[];let n_races=[];let holded_competition_reduced=holded_competition.map((hC=>hC[0]));holded_competition_reduced.forEach(((hC,hC_idx)=>{const bi=getBoatIndexFromMask(hC);const li=getLeagueIndexFromMask(hC);const n_teams=start_list[hC_idx].reduce(((val,sl)=>sl.length+val),0);pro_bk[bi]=(pro_bk[bi]||0)+n_teams;pro_lk[li]=(pro_lk[li]||0)+n_teams;pro_hc[hC_idx]=n_teams;n_races[hC_idx]=Math.max(...start_list[hC_idx].map((sl=>sl.length)))}));for(let i=0;i<pro_bk.length;++i)pro_bk[i]=pro_bk[i]||0;for(let i=0;i<pro_lk.length;++i)pro_lk[i]=pro_lk[i]||0;n_races=n_races.filter((n=>0!=n));const sum_races=n_races.reduce(((val,nr)=>val+nr),0);if(0==n_races.length)return undefined;const lcm=1==n_races.length?n_races[0]:math.lcm(...n_races);let n_generate=Math.pow(2,Math.ceil(Math.log2(lcm)))>>>0;while(n_generate<sum_races)n_generate*=2;const min_bk=Math.min(...pro_bk)||1,max_bk=Math.max(...pro_bk)||1;const min_lk=Math.min(...pro_lk)||1,max_lk=Math.max(...pro_lk)||1;const min_hc=Math.min(...pro_hc)||1,max_hc=Math.max(...pro_hc)||1;let calc_ratios=(val,min,max,method)=>{const denominator="iiii"===method?max:min;const d=val/denominator;if(Math.abs(d)>1e-15){switch(method){case"i":return Math.floor(d)>>>0;case"i-balanced":return(d%1<.7?Math.floor(d):Math.ceil(d))>>>0;case"i":return Math.floor(d)>>>0;case"ii":return Math.pow(2,Math.floor(Math.log2(d)))>>>0;case"iii":return Math.pow(2,Math.ceil(Math.log2(d)))>>>0;case"iiii":return Math.pow(2,Math.round(d-1e-10))>>>0}}return 0>>>0};let f=kh_js.bind_args_from_n(calc_ratios,2,min_bk,max_bk,"i-balanced");pro_bk=pro_bk.map((bk=>f(bk)));f=kh_js.bind_args_from_n(calc_ratios,2,min_lk,max_lk,"ii");pro_lk=pro_lk.map((lk=>f(lk)));f=kh_js.bind_args_from_n(calc_ratios,2,min_hc,max_hc,"iiii");pro_hc=pro_hc.map((hc=>f(hc)));const sum_bk=pro_bk.reduce(((val,bk)=>val+bk),0);const sum_lk=pro_lk.reduce(((val,lk)=>val+lk),0);const sum_hc=pro_hc.reduce(((val,hc)=>val+hc),0);let league_masks=pro_hc.map(((hc,i)=>[...Array(hc)].map((()=>getLeagueMaskFromMask(holded_competition[i][0]))))).flat();n_generate=Math.max(n_generate,sum_bk,sum_lk);let league_masks_index=0;let run_list=[];let i_generated=0;let league_masks_deferred=[];let first=true;while(i_generated<n_generate){for(let i_bk=0;i_bk<pro_bk.length;++i_bk){if(first){first=false;if(1==getBoatIndexFromMask(holded_competition_reduced[0]))continue}for(let i_bk2=0;i_bk2<pro_bk[i_bk];++i_bk2){let try_with_counter=true;let mask;if(!kh_js.isEmpty(league_masks_deferred)){mask=(league_masks_deferred.shift()|getBoatMaskFromIndex(i_bk)).toString(16);if(-1==holded_competition_reduced.indexOf(mask)){league_masks_deferred=[getLeagueMaskFromMask(mask),...league_masks_deferred]}else try_with_counter=false}if(try_with_counter){mask=(league_masks[league_masks_index++%league_masks.length]|getBoatMaskFromIndex(i_bk)).toString(16);if(-1==holded_competition_reduced.indexOf(mask)){league_masks_deferred.push(getLeagueMaskFromMask(mask));--i_bk;break}}run_list[i_generated++]=mask;if(i_generated>=n_generate)break}if(i_generated>=n_generate)break}}return run_list}kh__end_remove();export function generateFinalrunList(event_data,stable_sort=true,double_race_order=ms.enumDoubleRaceOrder.valueOf(event_data.paramz,"double-race-order")??ms.enumDoubleRaceOrder.drive_noop_,merged_cat_order=event_data.paramz["merged-cat-order"]){if(!kh_js.isValid(event_data))throw new ms.Error("param-not-determined","event_data");let holded_competition=event_data.categories["holded-competition"];if(kh_js.isEmpty(holded_competition))throw new ms.Error("invalid-argument","h-c");let team_list=Team.getTeamList(event_data,0);let all_ranking_lists=holded_competition.map((hC=>Object.values(getReportList(team_list,event_data.foreruns,[...Array(event_data.paramz.n_forerun)].map(((v,i)=>i)),hC,"sum","sort-best"))));all_ranking_lists=all_ranking_lists.map((ranking$hC=>ranking$hC.filter((team=>team.res.still_in_race()))));const must_double_race=ms.enumDoubleRaceOrder.drive_noop_!=double_race_order;const f_must_double_race=(ranking_length,rank=-1)=>{if(!must_double_race||2!=event_data.paramz.n_boats_per_race)return 0;if(-1==rank)return ranking_length>=4?2:ranking_length>=2?1:0;else return rank<4&&ranking_length>=4||rank<2&&ranking_length>=2?1:0};all_ranking_lists.forEach((ranking$hC=>ranking$hC.forEach(((team,rank)=>{team.init_considered=team.n_considered=1+f_must_double_race(ranking$hC.length,rank)}))));const visitors_boat=(()=>Team.getTeamList(event_data,0,true).filter((team=>team.isVisitorBoat)).pop())();const must_adjust=starter_feld=>Array.isArray(starter_feld)&&2==event_data.paramz.n_boats_per_race&&1==starter_feld.length%event_data.paramz.n_boats_per_race&&true!=starter_feld.at(-1)["third_eye"];const all_ranking_lists_must_adjust=all_ranking_lists.map(must_adjust);let merged=new Array(all_ranking_lists.length);merged_cat_order=merged_cat_order.map(enforceNumber);for(let i=0;i<all_ranking_lists.length;++i){if(all_ranking_lists_must_adjust[i]){const mask_hC_i=enforceNumber(holded_competition[i]);for(let m=0;m<merged_cat_order.length;++m){const mask=merged_cat_order[m];if(ms.mergedCatOrders.mcoThirdEye==mask){if(event_data.paramz["max_boats_per_race"]>event_data.paramz["n_boats_per_race"]){merged[i]??=[];merged[i][m]=[{...all_ranking_lists[i].at(-1),third_eye:true}]}}else if(ms.mergedCatOrders.mcoVisitorsBoat==mask){if(visitors_boat&&visitors_boat.hasCat(holded_competition[i])){merged[i]??=[];merged[i][m]=[{team:visitors_boat,cat:holded_competition[i]}]}}else{for(let j=i+1;j<all_ranking_lists.length;++j){if(all_ranking_lists_must_adjust[j]){const mask_hC_j=enforceNumber(holded_competition[j]);if(ms.mergedCatOrders.mcoDavidGoliath==mask&&0==(mask_hC_i&mask_hC_j)||mask&mask_hC_i&mask_hC_j){merged[i]??=[];merged[i][m]??=[];merged[i][m].push({team:all_ranking_lists[j][all_ranking_lists[j].length-1],cat:[holded_competition[i],holded_competition[j]],j})}}}}}}}for(let m=0;m<merged_cat_order.length;++m){let merged_cat_found=false;for(let i=0;i<all_ranking_lists.length;++i){const arli_length=all_ranking_lists[i].length;if(must_adjust(all_ranking_lists[i])){if(!kh_js.isEmpty(merged[i]?.[m])){const entry_0=merged[i][m][0];const cat_i=entry_0.cat?.[0]??entry_0.cat;if(kh_js.isValid(entry_0["third_eye"])){all_ranking_lists[i].at(-1)["third_eye"]=true;merged_cat_found=true}else if(visitors_boat&&visitors_boat===entry_0.team){const visitors_boat_copy=Team.forCompetition(visitors_boat,holded_competition[i]);visitors_boat_copy.init_considered=visitors_boat_copy.n_considered=1;all_ranking_lists[i].push(visitors_boat_copy);merged_cat_found=true}else{for(let m2=0;m2<merged[i][m].length;++m2){const entry_m2=merged[i][m][m2];const j=entry_m2.j;const cat_j=entry_m2.cat[1];if(must_adjust(all_ranking_lists[j])){const fight_for=all_ranking_lists[j].length;const team_from_other_cat={...all_ranking_lists[j].pop(),fight_for,cat:holded_competition[j]};all_ranking_lists[i].push(team_from_other_cat);merged_cat_found=true;break}}}}}}}{let n_races=0;for(let i=0;i<all_ranking_lists.length;++i){const arli_length=all_ranking_lists[i].length;n_races+=(arli_length/event_data.paramz.n_boats_per_race>>>0)+f_must_double_race(arli_length)}kh_log.debug?.(T9`n-races: ${n_races}`)}for(let i=0;i<all_ranking_lists.length;++i)if(must_adjust(all_ranking_lists[i]))all_ranking_lists[i].pop();const filterRankingKeys=k=>"heatno"!==k&&"res"!=k&&!kh_js.isNumber(k)&&isNaN(Number.parseInt(k));all_ranking_lists=all_ranking_lists.map(((arl,i_cat)=>arl.map(((arl_entry,i_rank)=>{arl_entry=kh_js.subset(JSON.parse(JSON.stringify(arl_entry)),filterRankingKeys);arl_entry.fight_for=arl_entry.fight_for||i_rank+1;if(!kh_js.isValid(arl_entry.cat))arl_entry.cat=holded_competition[i_cat];return arl_entry}))));let insert_pos_lenient=0;let finals=[];while(true){const arl_lengths=all_ranking_lists.map((arl=>arl.length));if(0==arl_lengths.reduce(((sum,l)=>sum+l),0))break;const arl_indexOfMax=kh_js.indexOfMaxValue(arl_lengths);let last_fight_for;let i_array=[...Array(all_ranking_lists.length)].map(((v,i)=>i)).rotate(arl_indexOfMax);for(let i of i_array){if(!kh_js.isEmpty(all_ranking_lists[i])){const arli_length=all_ranking_lists[i].length;const last_team=all_ranking_lists[i].at(-1);const max_boats=event_data.paramz.n_boats_per_race+(true==last_team["third_eye"]?1:0);let n_pop=arli_length%max_boats;n_pop=0==n_pop?max_boats:1==n_pop?n_pop+1:n_pop;const teams_in_race=all_ranking_lists[i].slice(-n_pop);let write_heat=arli_length>=arl_lengths[arl_indexOfMax]-1||!stable_sort&&arli_length>=arl_lengths[arl_indexOfMax]-event_data.paramz.n_boats_per_race-1;if(!write_heat&&(ms.enumDoubleRaceOrder.drive_wait_full_==double_race_order||ms.enumDoubleRaceOrder.drive_lenient_==double_race_order)){const cur_fight_for=Math.min(...teams_in_race.map((tir=>tir.fight_for)));if(cur_fight_for==last_fight_for)write_heat=true}if(write_heat){if(!kh_js.isEmpty(teams_in_race)){do{if(teams_in_race[0].init_considered!=teams_in_race[0].n_considered)teams_in_race.rotate(1);if(1==teams_in_race[0].init_considered)finals.push(teams_in_race);else{if(ms.enumDoubleRaceOrder.drive_lenient_==double_race_order&&(1!=teams_in_race[0].init_considered&&teams_in_race[0].init_considered==teams_in_race[0].n_considered)){finals.splice(insert_pos_lenient,0,teams_in_race.map((team=>({...team}))));++insert_pos_lenient}else{finals.push(teams_in_race.map((team=>({...team}))))}}{const team_list_vb=Team.getTeamList(event_data,0,true);const last_entry=finals.slice(-1)[0];let fight_for=last_entry.map((team=>team.fight_for)).sort(((ff1,ff2)=>ff1-ff2));let cats=last_entry.map((team=>team.cat["values"]&&team.cat.values().next().value||Array.isArray(team.cat)&&team.cat[0]||team.cat)).map((cat_mask=>getCompetitionNameFromMask(event_data,cat_mask)));kh_log.debug?.(T9`Im Kampf um Plätze ${fight_for}, Kats(${cats.join(" / ")} =>${last_entry.map(((team,i)=>team_list_vb.findByNo(team.no).name(cats[i])))}`)}if(0==teams_in_race.reduce(((sum,tir)=>{tir.n_considered-=1;return sum+tir.n_considered}),0)){all_ranking_lists[i].splice(-n_pop,n_pop);break}else if(ms.enumDoubleRaceOrder.drive_wait_full_==double_race_order||ms.enumDoubleRaceOrder.drive_lenient_==double_race_order){all_ranking_lists[i].rotate(n_pop);last_fight_for=Math.min(...teams_in_race.map((tir=>tir.fight_for)))}}while(ms.enumDoubleRaceOrder.drive_thru_==double_race_order)}}}}}return finals}kh_end_remove();export function getReportList(team_list,series,series_no,cat,accumulate="sum",sort_meth="sort-nop"){if(!kh_js.isValid(series)||!kh_js.isValid(series_no)||!kh_js.isValid(cat))throw new ms.Error("invalid-argument",[series,series_no,cat]);if(!Array.isArray(series_no))series_no=[series_no];if(sort_meth.startsWith("sort-heat")&&1!==series_no.length)throw new ms.Error("invalid-usage-of",[sort_meth,series_no]);try{const cat_arr=kh_js.isString(cat)&&JSON.parse(cat);if(Array.isArray(cat_arr))cat=cat_arr}catch(error){}let teams=!Array.isArray(cat)||1==cat.length?Team.getTeamList(team_list,Array.isArray(cat)?cat[0]:cat):cat.map((_cat=>Team.getTeamList(team_list,_cat).map((team=>Team.forCompetition(team,_cat))))).flat();let race_times={};teams.forEach((team=>{race_times["_"+team.no]={no:team.no,cat:Array.isArray(cat)?[...team.cat][0]:cat};[...Array(series_no.length)].forEach(((v,i)=>race_times["_"+team.no][series_no[i]]=new RaceTime(RaceTime.max_)))}));const handle_team=(team,_heatno,heat)=>{if((Array.isArray(cat)?cat.includes(team.cat):team.cat==cat)&&-1!=series_no.indexOf(team.seriesno||0)){const fight_for=Math.min(...heat.filter((track=>(Array.isArray(cat)?cat.includes(track.cat):track.cat==cat)&&kh_js.isValid(track.fight_for))).map((track=>track.fight_for)));const race_time_entry=race_times["_"+team.no]||{};race_time_entry[team.seriesno||(team.n_considered?team.init_considered-team.n_considered:undefined)||0]=team.time;if(kh_js.isValid(fight_for)&&Infinity!=fight_for&&!kh_js.isValid(race_time_entry["heatno"]))race_time_entry["heatno"]=fight_for}};series.forEach(((series$seriesno,seriesno_or_heatno)=>series$seriesno.forEach(((series$seriesno$heatno,heatno_or_trackno)=>{if(Array.isArray(series$seriesno$heatno))series$seriesno$heatno.forEach((series$seriesno$heatno$trackno=>handle_team(series$seriesno$heatno$trackno,heatno_or_trackno,series$seriesno$heatno)));else handle_team(series$seriesno$heatno,seriesno_or_heatno,series$seriesno)}))));kh_js.for_in(race_times,((race_times_key,race_times_value)=>{if(!kh_js.isValid(race_times_value.heatno))race_times_value.heatno=Object.keys(race_times).length}));kh_js.for_in(race_times,((race_times_key,race_times_value)=>{if(-1==Object.keys(race_times_value).findIndex(((vk,vv)=>!isNaN(vk))))delete race_times[race_times_key]}));const filter=-1!=accumulate.indexOf("-valid")?(_seriesno,rt)=>!isNaN(_seriesno)&&rt.isValid():(_seriesno,rt)=>!isNaN(_seriesno);class Rslt{constructor(){this.ts=0;this.tc=0;this.ti=[]}still_in_race(){return this.tc instanceof RaceTime&&this.tc.isTime()}is_tricky(){const idx_valid=this.ti.findIndex((ti=>ti.rt.isTime()&&ti.rt.isValid()));const idx_invalid=this.ti.findIndex((ti=>ti.rt.isSpecial()||RaceTime.max_==ti.rt.time));return-1!=idx_valid&&-1!=idx_invalid?{idx_valid,idx_invalid}:false}is_difficult(tricky){tricky=tricky??this.is_tricky();if(false==tricky||tricky.idx_valid<tricky.idx_invalid)return false;return tricky}post_process(){this.tc=new RaceTime(this.tc);if(this.tc.isValid())this.ts=new RaceTime(this.tc);else{const tricky=this.is_tricky();const difficult=this.is_difficult(tricky);if(false!=tricky){this.ts=new RaceTime(this.tc.time%RaceTime.max_);this.tt=this.ti.map((ti=>ti.rt)).toString()}if(false!=difficult){this.ts=this.ti[difficult.idx_invalid].rt}if(false==tricky){this.ts=new RaceTime(this.tc.time)}}}cmp(rslt){return Rslt.compare(this,rslt)}static compare(rslt1,rslt2){if(!(rslt1 instanceof Rslt)||!(rslt2 instanceof Rslt))throw new ms.Error("param-invalid");if(!rslt1.still_in_race()&&!rslt2.still_in_race())return 0;if(!rslt1.still_in_race())return 1;if(!rslt2.still_in_race())return-1;const diff=rslt1.tc.time-rslt2.tc.time|0;if(0!=diff||"sum"!=accumulate.substring(0,3))return diff;let rslt1_min=RaceTime.max_;let rslt2_min=RaceTime.max_;rslt1.ti.forEach((rslt1_ti=>{if(rslt1_ti.rt.isTime()&&rslt1_ti.rt.time<rslt1_min)rslt1_min=rslt1_ti.rt.time}));rslt2.ti.forEach((rslt2_ti=>{if(rslt2_ti.rt.isTime()&&rslt2_ti.rt.time<rslt2_min)rslt2_min=rslt2_ti.rt.time}));rslt1.tt=`min ${new RaceTime(rslt1_min)}`;rslt2.tt=`min ${new RaceTime(rslt2_min)}`;return rslt1_min-rslt2_min|0}}kh_js.for_in(race_times,((k,v)=>{let res=new Rslt;switch(accumulate.substring(0,3)){case"sum":{kh_js.for_in(v,((vk,vv)=>{if(filter(vk,vv)){if(!kh_js.isString(res.ts)){if(vv.isTime())res.ts+=vv.time;else res.ts=vv.time}res.tc+=vv.isTime()?vv.time:RaceTime.max_;res.ti.push({seriesno:vk,rt:vv})}}));res.post_process();race_times[k]["res"]=res;race_times[k]["n-values"]=res.ti.length;break}case"min":{res.ts=res.tc=RaceTime.max_;kh_js.for_in(v,((vk,vv)=>{if(filter(vk,vv)){if(!vv.isTime())res.tc=Math.min(vv.time,res.tc);res.ti.push({seriesno:vk,rt:vv})}}));res.post_process();race_times[k]["res"]=res;race_times[k]["n-values"]=res.ti.length;break}case"max":{kh_js.for_in(v,((vk,vv)=>{if(filter(vk,vv)){if(!vv.isTime())res.tc=Math.min(vv.time,res.tc);res.ti.push({seriesno:vk,rt:vv})}}));res.post_process();race_times[k]["res"]=res;race_times[k]["n-values"]=res.ti.length;break}case"all":{kh_js.for_in(v,((vk,vv)=>{if(filter(vk,vv)){if(!vv.isTime())res.tc=Math.min(vv.time,res.tc);res.ti.push({seriesno:vk,rt:vv})}}));res.post_process();race_times[k]["res"]=res;race_times[k]["n-values"]=res.ti.length;break}}}));if(!accumulate.startsWith("all")&&"sort-nop"!==sort_meth){const sub_rt=(rt1,rt2)=>Rslt.compare(rt1.res,rt2.res);const sub_rt_indirect=(ix1,ix2)=>sub_rt(race_times[ix1],race_times[ix2]);let ordered_race_times={};const invers=sort_meth.endsWith("-invers");switch(sort_meth){case"sort-best":case"sort-best-invers":{const cur_sub_rt_indirect=!invers?sub_rt_indirect:kh_js.flipArgz(sub_rt_indirect);Object.keys(race_times).sort(((k1,k2)=>cur_sub_rt_indirect(k1,k2))).sort(((k1,k2)=>race_times[k2]["n-values"]-race_times[k1]["n-values"])).forEach((k=>ordered_race_times[k]=race_times[k]));break}case"sort-alpha":Object.keys(race_times).sort(((k1,k2)=>teams.findByNo(race_times[k1].no).name(cat).localeCompare(teams.findByNo(race_times[k2].no).name(cat)))).forEach((k=>ordered_race_times[k]=race_times[k]));break;case"sort-heat":case"sort-heat-invers":{const sort_heatno=-1==sort_meth.indexOf("invers")?(rte1,rte2)=>rte1.heatno-rte2.heatno:(rte1,rte2)=>rte2.heatno-rte1.heatno;const sort_time=-1==sort_meth.indexOf("invers")?(rte1,rte2)=>sub_rt(rte1,rte2):(rte2,rte1)=>sub_rt(rte1,rte2);Object.keys(race_times).sort(((k1,k2)=>sort_heatno(race_times[k1],race_times[k2]))).forEach((k=>{const heatno=race_times[k].heatno;ordered_race_times["_"+heatno]=ordered_race_times["_"+heatno]||[];ordered_race_times["_"+heatno].push(race_times[k])}));kh_js.for_in(ordered_race_times,((heatno,per_heat_array)=>per_heat_array.sort(sort_time)));race_times=ordered_race_times;ordered_race_times={};kh_js.for_in(race_times,((heatno,per_heat_array)=>per_heat_array.forEach((race_entry=>ordered_race_times["_"+race_entry.no]=race_entry))));break}default:throw new ms.Error("invalid-argument",sort_meth)}race_times=ordered_race_times}return race_times}export class Team{constructor({no=-1,name="",company="",cat=[],pay="",aliases={}}={}){if(1==arguments.length&&"Team"==arguments[0].constructor.name)Object.assign(this,arguments[0]);else{this.no_=no;this.name_=name;this.company_=company;this.cat_=new Set(kh_js.isEmpty(name)?[]:[...cat].map((c=>c.trim())).filter((c=>!kh_js.isEmpty(c))));this.pay_=pay;this.aliases_=aliases}}get no(){return this.no_}set no(no){this.no_=no}set gname(s){this.name_=s;if(kh_js.isEmpty(s))this.cat_=new Set}get cat(){return this.cat_}set#cat(cat){this.cat_=cat}removeCat(cat){return this.cat_.delete(cat)}addCat(cat){return this.cat_.add(cat)}hasCat(cat){return this.cat_.has(cat)}get considered(){return 0!=this.cat_.size}get aliases(){return this.aliases_}set_alias(cat,alias){this.aliases_[cat]=alias}get isVisitorBoat(){return this.name()===Team.NameVisitorsBoat()}get company(){return this.company_}name(cat){if(cs.uni_flag&&!kh_js.isEmpty(this.name_))return U`${"dbraw.basevoc.team"} ${this.no_}`;return!cat||kh_js.isEmpty(this.aliases_)||!kh_js.isValid(this.aliases_[cat])?this.name_:this.aliases_[cat]}tstAdjacent(competitions){if(2>this.cat.size)return undefined;let effective_cats=[...this.cat_].filter((cat=>-1!=competitions.indexOf(cat)));if(2>effective_cats.length)return undefined;let adj_cats=[];for(let i=0;i<competitions.length-1;++i){let competitions_i=(Array.isArray(competitions[i])?competitions[i]:[competitions[i]]).filter((cat=>-1!=effective_cats.indexOf(cat)));if(!kh_js.isEmpty(competitions_i)){for(let j=i+1;j<competitions.length;++j){let competitions_j=(Array.isArray(competitions[j])?competitions[j]:[competitions[j]]).filter((cat=>-1!=effective_cats.indexOf(cat)));if(!kh_js.isEmpty(competitions_j)){if(1==j-i||competitions.length-1==j-i)adj_cats.push(1==j-i?j:i)}}}}adj_cats=0==adj_cats.length?[]:[adj_cats.sort(((v1,v2)=>v1-v2))[adj_cats.length-1]];let set=new Set;effective_cats.forEach((cat=>{let idx=competitions.indexOf(cat);if(set.has(cat)){if(-1==adj_cats.indexOf(idx))adj_cats.push(idx)}else set.add(cat)}));return adj_cats}static getTeamList(event_data_or_team_list,forCat=0,inkl_visitors_boat=false,excl_not_considered=true){let team_list=[...event_data_or_team_list.teams||event_data_or_team_list];team_list=team_list.map((team=>team instanceof Team?team:new Team(team)));team_list=team_list.filter((team=>(team.considered||!excl_not_considered)&&(0==forCat||team.hasCat(forCat))));if(!inkl_visitors_boat){team_list=team_list.filter((team=>!team.isVisitorBoat))}team_list.sort(((v1,v2)=>v1.no-v2.no));team_list.findByNo=no=>team_list.find((team=>team.no==no));return team_list}static forCompetition(team,forCat){if(!kh_js.isValid(team)||!kh_js.isValid(forCat)||0==forCat||!team.hasCat(forCat))return undefined;let ret=Object.assign(new Team(team),{cat_:new Set([forCat])});return ret}static NameVisitorsBoat(){return cs.uni_flag?U`${"dbraw.basevoc.team"} ${40}`:"Zuschauerboot"}toJSON(){return kh_js.Class.toJSON2(this,[{key:"company",value:""},{key:"cat",converter:val=>[...val]},{key:"pay",value:""},{key:"aliases",value:val=>kh_js.isEmpty(val)}])}clone(){return new Team(this.toJSON())}}export class TimeTableEntry{constructor({key=-1,start="",end=""}={}){if(arguments[0]instanceof TimeTableEntry)Object.assign(this,arguments[0]);else this.key_=key;this.start_=start;this.end_=end}get key(){return this.key_}get start(){return this.start_}get end(){return this.end_}get name(){return-1!=this.key_?ms.unzip("dbraw.basevoc.timetable.point"+this.key_):"---"}set start(s){this.start_=s}set end(e){this.end_=e}toJSON(){return kh_js.Class.toJSON(this,["key","start",{key:"end",value:""}])}clone(){return new TimeTableEntry(this.toJSON())}}export class RaceTime{constructor(race_time=RaceTime.max_){this.racetime_=undefined;if(race_time instanceof RaceTime)this.racetime_=race_time.racetime_;else if(kh_js.isNumber(race_time,true))this.racetime_=new Date(Number.parseInt(race_time));else{if(""===race_time||Number.isNaN(race_time))this.racetime_=RaceTime.max_;else if(RaceTime.isSpecial(race_time)){this.racetime_=race_time.trim().toUpperCase()}else{this.racetime_=Date.parse(race_time);if(!isNaN(this.racetime_))this.racetime_=new Date(this.racetime_);else{let hms=race_time.toString().split(":");if(1==hms.length)this.racetime_=new Date(Number.parseInt(race_time));else{if(2==hms.length)hms=["00",...hms];hms[0]=hms[0].padStart(2,"0");hms[1]=hms[1].padStart(2,"0");if(""==hms[2])hms[2]="00";let pos_comma=hms[2].indexOf(",");if(-1!=pos_comma){hms[2]=hms[2].substring(0,pos_comma)+"."+hms[2].substring(pos_comma+1)}if(1==pos_comma)hms[2]="0"+hms[2];this.racetime_=new Date(`1970-01-01T${hms.join(":")}Z`)}}}}if(!kh_js.isString(this.racetime_))this.racetime_=this.racetime_-new Date(0)}get time(){return this.racetime_}toString(hide_max=false,ms_frac=1){if(hide_max&&RaceTime.max_==this.racetime_)return"";if(kh_js.isString(this.racetime_))return this.racetime_;if(kh_js.isNumber(ms_frac)){ms_frac=ms_frac|0;if(0!==ms_frac&&1!==ms_frac&&10!=ms_frac&&100!=ms_frac)ms_frac=1}let hours=36e5<=this.racetime_?`${(this.racetime_/36e5>>>0).toString().padStart(2,"0")}:`:"";let ms=0==ms_frac?"":`,${(this.racetime_%1e3/ms_frac>>>0).toString().padStart(1==ms_frac?3:10==ms_frac?2:1,"0")}`;if(0==this.racetime_%10>>>0&&1==ms_frac)ms=ms.substring(0,3);return`${hours}${(this.racetime_%36e5/6e4>>>0).toString().padStart(2,"0")}:${(this.racetime_%6e4/1e3>>>0).toString().padStart(2,"0")}${ms}`}isValid(){return kh_js.isString(this.racetime_)||RaceTime.max_>this.racetime_}isTime(){return!kh_js.isString(this.racetime_)}isSpecial(){return RaceTime.isSpecial(this.toString())}toJSON(){return this.toString()}clone(){return new RaceTime(this.time)}static isSpecial(rt){return kh_js.isString(rt)&&-1!=[RaceTime.dnf_,RaceTime.dns_,RaceTime.dsq_].indexOf(rt.trim().toUpperCase())}static isValid(rt){if(!(rt instanceof RaceTime))rt=new RaceTime(rt);return rt.isValid()}static dnf_="DNF";static dns_="DNS";static dsq_="DSQ";static max_=36e5}export{enforceNumber,getBoatMaskFromMask,getLeagueMaskFromMask,getBoatIndexFromMask,getLeagueIndexFromMask,getBoatMaskFromIndex,getLeagueMaskFromIndex};kh_global.LoadedScripts.get(mf).resolve(ms);