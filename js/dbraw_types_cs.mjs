const kh_global=Function("return globalThis;")()||Function("return this;")()||Function("return self;")();const as_module=undefined==this;const asWorker="undefined"===typeof window&&"undefined"===typeof process&&self;const cf="dbraw";const mf="dbraw_types_cs_esm";kh_global.kh??={};kh_global.kh.context??="undefined"!==typeof window?kh_global.parent==kh_global?"window":"iframe":"undefined"!==typeof process?"node.js":"undefined"!==typeof self?self.name??"worker":"unknown";kh_global.kh.storage??={};const cs=kh_global.kh.storage[cf]??={cf,ms:new Set};const ms=kh_global.kh.storage[mf]??={mf,cs};cs.ms.add(ms);import{isValid,isEmpty,currentFunctionName}from"/contrib/jsm/kh_earlybird.js";const print_level=undefined;import{Logger}from"/contrib/jsm/kh_log.js";const kh_log=new Logger(print_level,()=>name);import{processTemplateContent}from"/contrib/jsm/kh_cms.js";import*as kh_io from"/contrib/jsm/kh_io.js";import{vjs}from"/contrib/jsm/kh_vanilla.js";import{getBoatIndexFromMask}from"/~KHCyT@MOD/js/dbraw_algo.mjs";export class Table_UIContext{#table_element_;constructor(table_element){this.#table_element_=vjs(table_element)?.[0];if(!isValid(this.#table_element_))throw new cs.Error("param-not-determined","table_element")}get table_element(){return this.#table_element_}static row_selector_='div[class*="kh-table-row-"]';static col_selector_='div[class*="kh-table-col-"]'}class NamesList{#list_;#listkey_;constructor(jo={},listkey){this.#list_=jo;this.#listkey_=listkey;const old_name="teams"in this.#list_?"teams":"companies"in this.#list_?"companies":undefined;if(old_name){this.#list_.entries??=this.#list_[old_name];delete this.#list_[old_name]}this.#list_.entries=(this.#list_.entries||[]).map(this._ensure_name).filter(tn=>!isEmpty(tn));this.#list_.entries=new Set(this.#list_.entries)}toJSON(){let ret={...this.#list_};ret.entries=[...ret.entries];return ret}get entries(){return this.#list_.entries}get listkey(){return this.#listkey_}add(name){name=this._ensure_name(name);if(isEmpty(name))return false;return this.#list_.entries.size!=this.#list_.entries.add(name).size}add_entries(dom_data_list,...entries){if(!isValid(dom_data_list)||isEmpty(entries))return;const results=entries.map(team=>this.add(team));if(-1!=results.indexOf(true)){TeamNamesList.toServer(this).then(res=>TeamNamesList.assign2DOM(this,dom_data_list)).catch(error=>{kh_log.error?.(T9`error in ${currentFunctionName()} => ${error}`);cs.setStatus(error)})}}_ensure_name(name){if(isEmpty(name))return name;name=name?.trim().replace(/"/g,"ʺ").replace(/'/g,"´");const tn_m=name.match(/([-\w\s\d]+?)\s*(?:\d|I)+[a-z]?$/);if(!isEmpty(tn_m))name=tn_m[1]||name;return name}static async fromServer(type,dom_data_list){kh_production_start_remove();if(cs.uni_flag)return;kh_production_end_remove();return kh_io.Util.fetchData(undefined,`/~data/${type.listkey}`,undefined,{get_json:true}).then(jo_data=>{const names_list=new type(jo_data??undefined);NamesList.assign2DOM(names_list,dom_data_list);return Promise.resolve(names_list)})}static async toServer(names_list){return import("/~KHCyT@MOD/js/dbraw.mjs").then(async({saveEventData})=>saveEventData(`/~data/${names_list.listkey}`,false,names_list.toJSON()))}static assign2DOM(names_list,dom_data_list){if(!isValid(names_list)||!isValid(dom_data_list))return;const content=[...names_list.entries].map(team_name=>vjs.create(`option`,{value:team_name,text:team_name}));vjs.data(dom_data_list,"content",content);vjs.attr(dom_data_list,"data-content","");processTemplateContent(dom_data_list)}}export class TeamNamesList extends NamesList{static listkey="teamlist";constructor(jo={}){super(jo,TeamNamesList.listkey)}static async getFromServer(dom_data_list){return NamesList.fromServer(TeamNamesList,dom_data_list)}}export class CompanyNamesList extends NamesList{static listkey="companieslist";constructor(jo={}){super(jo,CompanyNamesList.listkey)}static async getFromServer(dom_data_list){return NamesList.fromServer(CompanyNamesList,dom_data_list)}}export class StartTime{#start_day_;#diff_with_change_;#diff_without_change_;#start_t_;#last_bk_;#n_boats_;reset;constructor(event_data,heat_series_no){if(!event_data||!event_data.timetable)throw new cs.Error("param-not-determined","timetable");this.reset=()=>{let start_time=event_data.timetable[heat_series_no+1].start;start_time=start_time.split(":");this.#start_t_=new Date(event_data["event-date"]);this.#start_t_.setHours(+start_time[0]);this.#start_t_.setMinutes(+start_time[1]);this.#last_bk_=null;this.#n_boats_=event_data.paramz.n_boats};this.#start_day_=event_data["event-date"];this.#diff_with_change_=event_data.paramz["time-cost-change"].split(":").map(s=>Number.parseInt(s));this.#diff_without_change_=event_data.paramz["time-cost-without-change"].split(":").map(s=>Number.parseInt(s));this.reset()}next(cats){if(!Array.isArray(cats))throw new cs.Error("invalid-arguments","cat","array","expected");let cur_bk=[...new Array(this.#n_boats_.length)].map(()=>0);for(const cat of cats){const boat_index=getBoatIndexFromMask(cat);cur_bk[boat_index]+=1}if(isValid(this.#last_bk_)){let long_time=false;for(let i=0;i<cur_bk.length;++i){if(0!=cur_bk[i]&&this.#n_boats_[i]-this.#last_bk_[i]<cur_bk[i]){long_time=true;break}}let diff_time=long_time?this.#diff_without_change_:this.#diff_with_change_;this.#start_t_=new Date(this.#start_t_.valueOf()+diff_time[0]*60*1e3+diff_time[1]*1e3)}this.#last_bk_=cur_bk;return this.formatted}get formatted(){return`${this.current.getHours().toString().padStart(2,"0")}:${this.current.getMinutes().toString().padStart(2,"0")}`}get current(){return this.#start_t_}}kh_global.LoadedScripts.get(mf).resolve(ms);