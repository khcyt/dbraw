const kh_global=Function("return globalThis;")()||Function("return this;")()||Function("return self;")();const as_module=undefined==this;const asWorker="undefined"===typeof window&&"undefined"===typeof process&&self;const cf="dbraw";const mf="dbraw_server_module";kh_global.kh??={};kh_global.kh.context??="undefined"!==typeof window?kh_global.parent==kh_global?"window":"iframe":"undefined"!==typeof process?"node.js":"undefined"!==typeof self?self.name??"worker":"unknown";kh_global.kh.storage??={};const cs=kh_global.kh.storage[cf]??={cf,ms:new Set};const ms=kh_global.kh.storage[mf]??={mf,cs};cs.ms.add(ms);import*as fs from"node:fs";import*as path from"node:path";import*as http from"node:http";const{default:cors}=await import("cors");import on_headers from"on-headers";(async function server_module(){"use strict";if(!cs.app){import(`/common/server.mjs`).then((module=>module.main())).then((async app=>{cs.app=app;let print_level=undefined;const{Logger}=await import("/contrib/jsm/kh_log.js");const kh_log=new Logger(print_level,(()=>MF`${mf}`));let kh_js={...await import("/contrib/jsm/kh_earlybird.js"),...await import("/contrib/jsm/kh_functions.js"),...await import("/contrib/jsm/kh_classes.js")};const kh_io={...await import("/contrib/jsm/kh_io.js")};Object.assign(ms,await import("/~KHCyT@MOD/js/dbraw_types.mjs"));Object.assign(ms,await import("/~KHCyT@MOD/js/dbraw_strings.mjs"));Object.assign(ms,await import("/~KHCyT@MOD/js/dbraw_algo.mjs"));Object.assign(ms,await import("/~KHCyT@MOD/js/dbraw_router.mjs"));if(!kh_js.isEmpty(ms.strings))kh_js.StringMap.getGlobalMap().addEntries(ms.strings);const{forward}=await import("/common/forward_request.mjs");const{get_client_ip}=await import("/common/utils.mjs");const kh_server_cs=kh_global.kh.storage["kh_server"];const router=kh_server_cs.router;const dbraw_router=new ms.Router(kh_server_cs);const h4EF=new ms.Handling4EventFile(kh_server_cs);cs.sessionData=new class _Map extends Map{constructor(){super()}set(key_or_req,value){if(kh_js.isString(value)){try{value=JSON.parse(value)}catch(error){kh_log.error?.(T9`error during JSON.parse value ${value}, error=> ${error}`);value={}}}const key=key_or_req instanceof http.IncomingMessage?kh_server_cs.sessionID(key_or_req):key_or_req;let keys=Object.keys(value).filter((k=>-1==["event-data","ws","upgrade-candidate","stage-data"].indexOf(k)));const converter=kh_server_cs.server_options.app_settings.local_fs?fn=>path.parse(fn).base:fn=>fn;if("function"!==typeof value["toJSON"]){Object.defineProperty(value,"toJSON",{value:()=>kh_js.Class.toJSON(value,[{key:"event-data",converter},...keys]),enumerable:false,configurable:false,writable:false})}value=new Proxy(value,{get(target,prop,receiver){if(prop in target)return target[prop];return target[kh_js.toKebabCase(prop)]},set(target,prop,value){if(prop in target)target[prop]=value;else target[kh_js.toKebabCase(prop)]=value;return true}});super.set(key,value);if(key_or_req instanceof http.IncomingMessage){key_or_req.session.data=value.toJSON();this.#protect_sd(key_or_req)}}#protect_sd(req){if(!(req instanceof http.IncomingMessage))return;delete req.session.data["user-role"];delete req.session.data["user-name"]}get(key_or_req){const key=key_or_req instanceof http.IncomingMessage?kh_server_cs.sessionID(key_or_req):key_or_req;let value_ret=super.get(key);if(key_or_req instanceof http.IncomingMessage){if(!kh_js.isValid(value_ret)){value_ret=kh_js.isValid(key_or_req.session.data)?kh_js.cloneObject(key_or_req.session.data):{};this.set(key_or_req,value_ret);if(kh_js.isValid(key_or_req.session.data))this.#protect_sd(key_or_req)}if(kh_js.isValid(value_ret)&&!kh_js.isValid(key_or_req.session.data)){key_or_req.session.data=value_ret.toJSON();this.#protect_sd(key_or_req)}}return value_ret}merge(key,data){return this.set(key,kh_js.JSON8MergePatch.apply(this.get(key)??{},data,{assign:true}))}};let eventData=h4EF.createEventMap(ms.prepareData);const ALL_EVENTS="ALL_EVENTS";const CUR_EVENT="CUR_EVENT";const CUR_YEAR="CUR_YEAR";function getEventData(key_or_req,event_key){try{if(CUR_EVENT==event_key)event_key=cs.sessionData.get(key_or_req)?.eventSelected;const sid=key_or_req instanceof http.IncomingMessage?kh_server_cs.sessionID(key_or_req):key_or_req;kh_log.debug?.(T9`SID(${sid}) vs stored SID's ${[...cs.sessionData.keys()]}`);if(!kh_js.isValid(event_key)){throw new ms.Error({msg:`invalid event-key (${event_key})`,status:404})}let filename=cs.sessionData.get(key_or_req)?.eventData;if(!kh_js.isValid(filename))throw new ms.Error(T9`can't get event data source for ${sid}, ${cs.sessionData.get(key_or_req)}`);let event_data=eventData.get(filename);if(!kh_js.isValid(event_data))throw new ms.Error(`can't get event data for ${filename}`);return ALL_EVENTS==event_key?event_data:event_data.events[event_key]}catch(error){kh_log.error?.(T9`error in getEventData() with event_key${event_key} => error`);throw error}}function canSendFinalResults(key_or_req,event_key_or_event_data){try{let sD=cs.sessionData.get(key_or_req);if("writer"==sD?.userRole)return true;const event_data=kh_js.isObject(event_key_or_event_data)?event_key_or_event_data.events??event_key_or_event_data:getEventData(key_or_req,event_key_or_event_data);const event_key=kh_js.isObject(event_key_or_event_data)?ALL_EVENTS:event_key_or_event_data;const test=curEventData=>{if(!kh_js.isValid(curEventData))return false;const now=new Date;const saveTime=new Date(`${curEventData["event-date"]} ${curEventData.timetable.at(-1).start} ${curEventData.timezone??"GMT+0200"}`);return now>=saveTime};return ALL_EVENTS==event_key?Object.fromEntries(Object.entries(event_data).filter((([key,value])=>kh_js.isNumber(key,true))).map((([key,value])=>[key,test(value)]))):test(event_data)}catch(error){kh_log.error?.(T9`error in canSendFinalResults() with event_key${event_key_or_event_data} => ${error}`);throw error}}const{createWebSocketServer}=await import(`/common/websocket_server.mjs`);app.createServer().on("listening",(e=>{cs["kh-wss"]??=createWebSocketServer(cs.sessionData,{eventopen:on_ws_open,eventmessage:on_ws_msg,eventclose:on_ws_close,eventerror:on_ws_error});const server_opts=app.server().getOptions();const so_filter_name=server_opts.session_filter;kh_server_cs[so_filter_name]??=function(session,now,storeTime){const uncomplete=server_opts.app_name==session.appid&&"healtcheck"!==session.id&&"healthcheck"!==session.id&&!kh_js.isValid(session.data)&&36e5<now-storeTime;return uncomplete};let preload_years=(new Date).getFullYear();preload_years=new Array(4).map(((v,i)=>preload_years-i));preload_years=new Set([...kh_server_cs.server_options.app_settings.preload_years||[],...preload_years]);Promise.resolve(true).then((()=>Promise.allSettled([...preload_years].map((year=>{const filename=h4EF.stdFileNameAuto(undefined,year,true,true);return eventData.ensure(filename,year)})))));if(false)kh_js.defer(1e3).then((()=>{const project=admin.initializeApp({credential:admin.credential.cert(serviceAccount),databaseURL:"https://dbraw-f754b-default-rtdb.europe-west1.firebasedatabase.app"});const db=admin.database(project);db.ref("/teamlist/teams").get().then((snapshot=>{kh_log.info?.(T9`teams3= ${snapshot.val()}`)}));db.ref("teamlist/teams").get().then((snapshot=>{kh_log.info?.(T9`teams4= ${snapshot.val()}`)}));db.ref("/2021/event-file-2021/events/0/categories").get().then((data=>kh_log.info?.(T9`categories= ${data}`)))}));if(false)kh_js.defer(1e3).then((async()=>{const scopes=["https://www.googleapis.com/auth/userinfo.email","https://www.googleapis.com/auth/firebase.database"];const jwtClient=new google.auth.JWT(serviceAccount.client_email,null,serviceAccount.private_key,scopes);let accessToken;try{accessToken=await jwtClient.authorize();if(null==accessToken.access_token)kh_log.info?.("Provided service account does not have permission to generate access tokens");else accessToken=accessToken.access_token;kh_log.debug?.(T9`get generated access token ${jwtClient.getTokenInfo(accessToken)}`);const data=await kh_io.Util.fetchData(undefined,`https://dbraw-f754b-default-rtdb.europe-west1.firebasedatabase.app/teams.json`,undefined,{get_json:true,headers:{Authorization:`Bearer ${accessToken}`}});kh_log.debug?.(T9`received data ${data}`)}catch(error){kh_log.error?.(T9`Error making request to generate access token => ${error}`)}}))}));router.get(/\/~KHCyT@MOD\/.*/,dbraw_router.handle_get_mod.bind(dbraw_router));const writer_names=["esvlokraw","orgteam"];const forcewriter_name="forcewriter";kh_server_cs["queryFunc"]=[(req,res,next)=>{const session_id=kh_server_cs.sessionID(req);kh_log.debug?.(T9`queryFunc:${req.originalUrl} -> query= ${req.query}, sessionID= ${session_id}`);if(-1==session_id){kh_log.info?.("invalid session id(-1) during excution of queryFunc()");return}if(kh_js.isValid(cs.sessionData.get(session_id)?.userName))return;if(req.query&&forcewriter_name==req.query.user){testDowngrade();cs.sessionData.merge(req,{userRole:"writer",userName:"esvlokraw"})}else if(req.query&&-1!=writer_names.indexOf(req.query.user)){for(let[sid,session_data]of cs.sessionData.entries()){if("writer"==session_data.userRole&&sid!==session_id){kh_log.info?.("at the same time, only one writer is accepted");cs.sessionData.merge(req,{upgradeCandidate:"true",userName:req.query.user});return}}cs.sessionData.merge(req,{userRole:"writer",userName:req.query.user})}else cs.sessionData.merge(req,{userRole:"reader",userName:"reader"});if("/"!==req.path){on_headers(res,(()=>{cs.sessionData.merge(req,{userRole:null,userName:null,upgradeCandidate:null})}))}}];const forbidden=["/common/","dbraw-fbsa","event-file-","templ_new_year.json","package.json","server.json","server.mjs","Beschreibung der Internetapplikation.pdf"];kh_server_cs["kh-validation-func"]=function(req,res,next){const cur_session_data=cs.sessionData.get(req);let writer;if(!kh_js.isValid(cur_session_data?.userRole)){writer=-1!=writer_names.indexOf(req.query?.user)||forcewriter_name==req.query?.user}writer??="writer"==cur_session_data?.userRole;kh_log.debug?.(T9`kh-validation-func:${req.originalUrl}) -> request= ${req.originalUrl} ~ ${req.path}, sessionID= ${kh_server_cs.sessionID(req)}`+T9` admin(${writer})`);let allowed=writer||-1==forbidden.findIndex((entry=>-1!=req.originalUrl.indexOf(entry)));return allowed};router.get(/\/~data\/(?:team|companies)list/,dbraw_router.handle_get_teamlist.bind(dbraw_router));router.post(/\/~data\/(?:team|companies)list/,dbraw_router.handle_post_teamlist.bind(dbraw_router));router.get("/app-doc",dbraw_router.handle_docfile.bind(dbraw_router));function repl(s){return kh_js.isString(s)?s.replace(/>/g,"&gt;").replace(/</g,"&lt;"):s}const corsOptions={origin:function(origin,callback){if(!kh_js.isValid(origin)||origin.startsWith("https://www.kanu-cottbus.de")||origin.startsWith("https://kanu-cottbus.de")||origin.startsWith("https://141.43.76.4")){return callback(null,true)}else return callback(new ms.Error({msg:"invalid-access",status:400,obj:origin}))},credentials:true};router.options(["/~data/events/data/:year","/~data/result/:year/:event_key"],cors(corsOptions));router.get("/~data/events/data/:year",cors(corsOptions),(async(req,res,next)=>{try{let year=req.params.year;if(CUR_YEAR==year)year=(new Date).getFullYear();const filename=h4EF.stdFileNameAuto(undefined,year,true,true);kh_log.debug?.("cookies(",req.headers.cookie,")",kh_server_cs.server_options.session_cookie_name);kh_log.debug?.(T9`router:${kh_server_cs.get_method2(req)} -> request for JSON file | ${req.originalUrl} | SID(${req.session.id} | ${kh_server_cs.sessionID(req)})) | -> send ${filename}`);const client_ip=get_client_ip(req);const origin=req.headers.origin;const req_path=req.path;cs.sessionData.merge(req,{eventData:filename,eventYear:year});let event_data=await eventData.ensure(filename,year);const cSFR=canSendFinalResults(req,event_data);const f=finalruns=>finalruns?.forEach((heat=>heat.forEach((heat$team=>heat$team.time=""))));const musClone=-1!=Object.values(cSFR).indexOf(false);if(musClone){event_data=kh_js.cloneObject(event_data);Object.entries(cSFR).forEach((([key,value])=>{if(!value)f(event_data.events[key].finalruns)}))}return res.json(event_data)}catch(error){error.log=msg2send=>kh_log.error?.(T9`router:${kh_server_cs.get_method2(req)}) -> error= ${msg2send.error||msg2send}`);error._status=404;return next(error)}}));router.get("/~data/result/:year/:event_keys",cors(corsOptions),(async(req,res,next)=>{try{kh_log.debug?.(T9`router:${kh_server_cs.get_method2(req)} -> request for Results | ${req.originalUrl} | SID(${req.session.id} | ${kh_server_cs.sessionID(req)}))`);let result=[];let event_keys=req.params.event_keys??0;if(kh_js.isString(event_keys)){try{event_keys=JSON.parse(event_keys)}catch(error){throw new ms.Error({msg:["param-not-determined","event-keys"]})}}if(!Array.isArray(event_keys))event_keys=[event_keys];const event_data_full=await forward({path:`/~data/events/data/${req.params.year}`,method:"GET",fetch_options:{get_json:true}},req);event_keys.forEach((event_key=>{const event_data=event_data_full?.events?.[event_key];if(kh_js.isEmpty(event_data))throw new ms.Error({msg:["param-not-determined","event-data"]});ms.prepareForerunData(event_data);ms.prepareFinalrunData(event_data);let cat=req.query.cat||-1;let series=req.query.series||[{f:0}];const accumulate=req.query.acc||"sum";cat=-1==cat?event_data.categories["holded-competition"]:[cat];if(kh_js.isString(series)){try{series=JSON.parse(series)}catch(error){kh_log.info?.(T9`info/error in ${kh_js.currentFunctionName()} => ${error}, during parse(${series})`)}}cat.forEach((cur_cat=>{try{const cat_arr=kh_js.isString(cur_cat)&&JSON.parse(cur_cat);if(Array.isArray(cat_arr))cur_cat=cat_arr}catch(error){kh_log.info?.(T9`info/error in ${kh_js.currentFunctionName()} => ${error}, during parse(${cur_cat})`)}series.forEach((cur_series=>{const finals=kh_js.isValid(cur_series["f"]);const seriesno=cur_series[finals?"f":"v"];const sort_meth=req.query.sort||(finals&&!Array.isArray(cur_cat)?"sort-heat":"sort-best");const team_list=ms.Team.getTeamList(event_data.teams,Array.isArray(cur_cat)?0:cur_cat,finals);const report_list=ms.getReportList(team_list,finals?event_data.finalruns:event_data.foreruns,seriesno,cur_cat,accumulate,sort_meth);kh_js.for_in(report_list,((k,v)=>{const team=team_list.findByNo(k.substring(1));report_list[team.name(cur_cat)]=v;delete report_list[k]}));const headline_competition=!Array.isArray(cur_cat)?ms.getCompetitionNameFromMask(event_data,cur_cat):U`${"dbraw.basevoc.label.select.boat.all.2"} ${ms.getBoatNameFromMask(event_data,cur_cat[0])}`;const headline_series=U`${finals?"title.page.finalrun":"title.page.forerun"}`+U`${Array.isArray(seriesno)?U` ${"dbraw.basevoc.over.all"}`:finals?"":` ${seriesno+1}`}`;result.push({label:`${headline_competition} - ${headline_series}`,list:report_list})}))}))}));return res.json(result)}catch(error){error.log=msg2send=>kh_log.error?.(T9`router:${kh_server_cs.get_method2(req)}) -> error= ${msg2send.error||msg2send}`);error._status=404;return next(error)}}));function saveData2({data,event_key=ALL_EVENTS,req}={}){if(!kh_js.isValid(event_key))throw new ms.Error({msg:"invalid-argument",status:400,obj:"event-key"});data=data||req.body;let auto_save=data["auto_save"];let as_filename=!auto_save&&data["filename"];delete data["auto_save"];delete data["filename"];delete data.broadcast;const sD=cs.sessionData.get(req);if(kh_js.isEmpty(sD))throw new ms.Error({msg:"invalid-argument",status:404,obj:"session-id"});const year=sD.eventYear;const filename=sD.eventData;if(kh_js.isEmpty(filename)){kh_log.error?.(T9`empty filename not allowed in ${kh_js.currentFunctionName()}`);throw new ms.Error({msg:"param-not-determined",status:500,obj:"filename",val:"empty"})}if(kh_js.isValid(req))kh_log.debug?.(`router:${req&&req.route.stack[0].method}(${req.route.path}) -> ${req.originalUrl} -> save '${year}' in ${filename}`);const cur_full_data=!auto_save?eventData.get(filename):undefined;if(ALL_EVENTS!=event_key){let full_data=eventData.get(filename);if(kh_js.isEmpty(full_data)){kh_log.error?.(T9`full event data not determined from ${filename} in ${kh_js.currentFunctionName()}`);throw new ms.Error({msg:"param-not-determined",status:500,obj:"event-data",known:Object.keys(eventData)})}if(CUR_EVENT==event_key)kh_log.trace?.(T9`CUR_EVENT is set for save, event_key=${cs.sessionData.get(req).eventSelected} // ${cs.sessionData.get(req)}`);if(CUR_EVENT==event_key)event_key=cs.sessionData.get(req).eventSelected;if(!kh_js.isValid(event_key)){throw new ms.Error({msg:`invalid event-key (${event_key})`,status:404})}full_data["events"][event_key]=data;data=full_data}eventData.ensure(filename,year,data).catch((error=>{kh_log.error?.(T9`ensure event data fails for ${filename} in ${kh_js.currentFunctionName()}, error => ${error}`);throw new ms.Error({status:500,msg:error,cause:error})}));return(!kh_js.isString(as_filename)?h4EF.saveData(year,filename,data,auto_save):Promise.resolve(true)).then((()=>kh_js.isValid(cur_full_data)?h4EF.saveData(year,filename,cur_full_data,true):Promise.resolve(true))).then((()=>kh_js.isString(as_filename)&&filename!==as_filename?h4EF.saveData(year,filename=h4EF.resolveToAuto(as_filename,year),data,false):Promise.resolve(true))).catch((error=>{kh_log.error?.(T9`save event data fails for ${filename} in ${kh_js.currentFunctionName()}, error => ${error}`);throw new ms.Error({msg:`Write data fails ${error}`,status:500,obj:filename,cause:error})}))}router.post("/~data/event-file",(async(req,res,next)=>{try{kh_log.debug?.(`router:${kh_server_cs.get_method2(req)} -> request for save event file - full data set`);if("writer"!==cs.sessionData.get(req).userRole)throw new ms.Error({status:403,msg:"invalid-access"});const enumSocket=ms.enumSocket;if(kh_js.isEmpty(req.body))throw new ms.Error({msg:"invalid-argument",status:400,obj:"body"});const stage=req.query.stage??0;if(0==stage){let data=req.body;if(kh_js.isString(data))data=JSON.parse(data);let keys=JSON.stringify(Object.keys(data));keys=[...keys.matchAll(/event\-file\-(\d\d\d\d)/g)];const years=keys.map((match=>match[1]));keys=keys.map((match=>match[0]));const send_data={[enumSocket.attr_msg_type_]:enumSocket.mt_user_requ_,[enumSocket.attr_msg_sub_type_]:enumSocket.mt_should_override_,[enumSocket.attr_value_]:{years}};cs.sessionData.merge(req,{stageData:{stage,data,years,keys}});return res.json(send_data)}else if(1==stage){const sD=cs.sessionData.get(req);const stage_data=sD.stageData;if(kh_js.isEmpty(stage_data))throw new ms.Error({msg:"invalid-argument",status:400,obj:"stage-data"});const years_new=req.body.years;const years_saved=stage_data["years"];let years_intersection=years_saved.filter((year=>years_new.includes(year)));years_intersection=years_intersection.map((year=>Number.parseInt(year)));const write_ops=years_intersection.map(((year,index)=>{const filename=h4EF.stdFileNameAuto(undefined,year,undefined,true);const data2write=kh_js.minify_json(stage_data.data[`event-file-${year}`],{filter_key:"comment",as_string:false});return h4EF.writeFile(filename,data2write,false).then((()=>eventData.ensure(filename,year,data2write))).catch((error=>{kh_log.error?.(T9`router:${kh_server_cs.get_method2(req)} -> error= ${error} @ stage level ${stage} @ write data`);return Promise.reject(error)}))}));return Promise.all(write_ops).then((()=>res.json(years_intersection))).catch((()=>res.json([]))).then((()=>{let sDs=[...cs.sessionData.entries()].filter((entry=>years_intersection.includes(+entry[1].eventYear)));const sid_admin=kh_server_cs.sessionID(req);const index_admin=sDs.findIndex((entry=>entry[0]==sid_admin));const sD=-1!=index_admin?sDs.splice(index_admin,1):undefined;if(kh_js.isValid(sD)){sDs.forEach((_sD=>delete _sD.upgradeCandidate));refresh_view(sD[0][0])}kh_global.setTimeout((()=>sDs.forEach((_sD=>refresh_view(_sD[0])))),250)})).catch((error=>{kh_log.error?.(T9`router:${kh_server_cs.get_method2(req)} -> error= ${error} @ stage level ${stage} @ distribute data`)}))}}catch(error){kh_log.error?.(T9`router:${kh_server_cs.get_method2(req)} -> error= ${error}`);res.status(error.status||404);return next(error)}}));router.post("/~data/events/data",(async(req,res,next)=>{try{kh_log.debug?.(`router:${kh_server_cs.get_method2(req)} -> request for save data (full)`);if("writer"!==cs.sessionData.get(req).userRole)throw new ms.Error({status:403,msg:"invalid-access"});if(kh_js.isEmpty(req.body))throw new ms.Error({msg:"invalid-argument",status:400,obj:"body"});ms.prepareData(req.body);kh_log.debug?.(T9`Broadcast Message= ${req.body.broadcast??"none"}`);if(kh_js.isValid(req.body.broadcast)){broadcast_msg(req,req.body.broadcast)}await saveData2({req});kh_log.debug?.(T9`data successfull saved`);res.status(201);return res.json({result:"OK",status:res.statusCode||201,_links:{self:T9`${kh_server_cs.getOwnURL(req)}${req.originalUrl}`}})}catch(error){kh_log.error?.(T9`router:${kh_server_cs.get_method2(req)} -> error= ${error}`);res.status(error.status||404);return next(error)}}));router.post("/~data/events/:event_key/data",(async(req,res,next)=>{try{kh_log.debug?.(`router:${kh_server_cs.get_method2(req)} -> request for save data (${req.params.event_key}) SID(${kh_server_cs.sessionID(req)})`);if("writer"!==cs.sessionData.get(req).userRole)throw new ms.Error({status:403,msg:"invalid-access"});if(kh_js.isEmpty(req.body))throw new ms.Error({msg:"invalid-argument",status:400,obj:"body"});ms.prepareOneEvent(req.body);kh_log.debug?.(T9`Broadcast Message= ${req.body.broadcast??"none"}`);if(kh_js.isValid(req.body.broadcast)){broadcast_msg(req,req.body.broadcast)}await saveData2({req,event_key:req.params.event_key});kh_log.debug?.(T9`data successfull saved`);res.status(201);return res.json({result:"OK",status:res.statusCode||201,_links:{self:T9`${kh_server_cs.getOwnURL(req)}${req.originalUrl}`}})}catch(error){error.log=msg2send=>kh_log.error?.(T9`router:${kh_server_cs.get_method2(req)} -> error= ${msg2send.error??msg2send}`);error._status??=404;return next(error)}}));router.put("/~data/events/:event_key",((req,res,next)=>{try{kh_log.debug?.(T9`router:${kh_server_cs.get_method2(req)} -> event_key(${req.params.event_key}) -> ${req.body}`);let data=req["body"];if(kh_js.isEmpty(data))return res.status(400);if(data.status){switch(data.status){case"selected":{const client_ip=get_client_ip(req);const req_path=req.path;const origin=req.headers.origin;const sD={"user-role":"reader",...cs.sessionData.get(req)||{},"event-selected":req.params.event_key};kh_log.trace?.(T9`put sD(${Object.keys(sD)})`);cs.sessionData.set(req,sD);break}default:break}res.status(200)}kh_log.debug?.(T9`router:${kh_server_cs.get_method2(req)} -> ${cs.sessionData.get(req)}`);return res.json({result:400>res.statusCode?"OK":"Error",status:res.statusCode||200,_links:{self:T9`${kh_server_cs.getOwnURL(req)}${req.originalUrl}`}})}catch(error){console.error("********** error= ",error);kh_log.error?.(T9`router:${kh_server_cs.get_method2(req)} -> error= ${error}`);return next(error)}}));router.get("/~data/events/:event_key/data",((req,res,next)=>{try{kh_log.debug?.(T9`router:${kh_server_cs.get_method2(req)} -> ${req.session.id} | ${kh_server_cs.sessionID(req)})`);let event_data=getEventData(req,req.params.event_key);const cSFR=canSendFinalResults(req,req.params.event_key);const f=finalruns=>finalruns?.forEach((heat=>heat.forEach((heat$team=>heat$team.time=""))));if(!kh_js.isObject(cSFR)){if(!cSFR){event_data=kh_js.cloneObject(event_data);f(event_data.finalruns)}}else{const musClone=-1!=Object.values(cSFR).indexOf(false);if(musClone)event_data=kh_js.cloneObject(event_data);Object.entries(cSFR).forEach((([key,value])=>{if(!value)f(event_data[key].finalruns)}))}res.json(event_data)}catch(error){kh_log.error?.(T9`router:${kh_server_cs.get_method2(req)} -> error= ${error}`);res.status(error.status||404);return next(error)}}));router.get("/~data/events/selection",((req,res,next)=>{try{kh_log.debug?.(T9`router:${kh_server_cs.get_method2(req)} -> ${req.session.id} | ${kh_server_cs.sessionID(req)})`);const sD=cs.sessionData.get(req);if(kh_js.isEmpty(sD))throw new ms.Error({msg:"invalid-argument",status:404,obj:"session-id"});const result={year:sD.eventYear,key:sD.eventSelected};res.json({result,selection:result})}catch(error){kh_log.error?.(T9`router:${kh_server_cs.get_method2(req)} -> error= ${error}`);res.status(error.status||404);return next(error)}}));router.patch("/~data/events/:event_key/data/:series",((req,res,next)=>{try{kh_log.debug?.(T9`router:${kh_server_cs.get_method2(req)}?${req.query}) -> ${cs.sessionData.get(req)} | ${req.params.event_key}`);const session_data=cs.sessionData.get(req);if("writer"!==session_data.userRole||"orgteam"==session_data.userName)throw new ms.Error({status:403,msg:"invalid-access"});let event_data=getEventData(req,req.params.event_key);let res_json;switch(req.params.series){case"foreruns":{let min_per_cat=req.query.min_per_cat||1;let random_list=kh_js.string2bool(req.query.random_list)??false;kh_log.debug?.(T9`router:${req.route.stack[0].method}(${req.route.path}) -> ${min_per_cat} ${random_list}`);res_json=ms.generateForerunList(event_data,Number.parseInt(min_per_cat),random_list);event_data.foreruns=res_json;ms.prepareForerunData(event_data);break}case"finalruns":{const stable_sort=kh_js.string2bool(req.query.stable_sort)??true;const double_race_order=req.query.double_race_order;const merged_cat_order=kh_js.isValid(req.query.merged_cat_order)?JSON.parse(req.query.merged_cat_order):undefined;kh_log.info?.(T9`generate final runs with => stable_sort= ${stable_sort}, double_race_order= ${double_race_order}, merged_cat_order= ${merged_cat_order}`);res_json=ms.generateFinalrunList(event_data,stable_sort,double_race_order,merged_cat_order);event_data.finalruns=res_json;ms.prepareFinalrunData(event_data);break}}if(kh_js.isValid(res_json)){res.json(res_json)}else throw new ms.Error({status:400,msg:"invalid-argument"})}catch(error){kh_log.error?.(T9`router:${kh_server_cs.get_method2(req)} -> error= ${error}, ${Object.keys(error)}, ${Object.values(error)}`);res.status(error.status||404);return next(error)}}));let on_ws_open=async function(ws,session_id,req){kh_log.debug?.(T9`ws open ${session_id} ${true.toString()}`);const enumSocket=ms.enumSocket;const session_data=cs.sessionData.get(session_id);const writer="writer"===session_data.userRole;const as_path=`app-settings`;const app_settings=await forward({path:as_path,method:"GET",fetch_options:{get_json:true,headers:{cookie:req.headers.cookie}}},req).catch((error=>kh_log.error?.(T9`fetch data from app-settings fails url(${as_path}), error= ${error}`)));let send_data=[{[enumSocket.attr_msg_type_]:enumSocket.mt_app_status_,[enumSocket.attr_msg_sub_type_]:enumSocket.mt_user_right_,[enumSocket.attr_value_]:writer.toString()},{[enumSocket.attr_msg_type_]:enumSocket.mt_app_status_,[enumSocket.attr_msg_sub_type_]:enumSocket.mt_app_settings_,[enumSocket.attr_value_]:app_settings}];ws.send(JSON.stringify(send_data))};import("/common/get_settings.mjs").then((({SettingsFilterFunc})=>{SettingsFilterFunc.add("/app-settings",((server_settings,req)=>{const session_data=cs.sessionData.get(req);if("orgteam"==session_data.userName){server_settings.app_settings.enabled_tabs=["timetable","teamlist"]}return server_settings}))}));function on_ws_msg(ws,session_id,message_event,is_binary){let message_data=message_event.data;try{if(is_binary||Buffer.isBuffer(message_data))message_data=message_data.toString();const enumSocket=ms.enumSocket;let msgs=JSON.parse(message_data);if(!Array.isArray(msgs))msgs=[msgs];msgs.forEach((msg=>{let msg_type=enumSocket.valueOf(msg,enumSocket.attr_msg_type_);let msg_sub_type=enumSocket.valueOf(msg,enumSocket.attr_msg_sub_type_);kh_log.trace?.(T9`ws message_event ${session_id} => ${msg_type} - ${msg_sub_type} - ${msg[enumSocket.attr_value_]}`);switch(msg_type){case enumSocket.mt_socket_status_:{const session_data=cs.sessionData.get(session_id);switch(msg_sub_type){case enumSocket.mt_watchdog_:{break}default:{if("closed"==msg[enumSocket.attr_value_]){kh_log.debug?.(T9`${ws.name()} should closed from client side`);if(session_data&&"writer"===session_data.userRole)testUpgrade();cs.sessionData.delete(session_id)}break}}break}default:break}}))}catch(error){if("ping"==message_data)return;if("pong"==message_data)return;kh_log.warn?.(T9`unexpected error or ws message_event with unknown data format @sessionID(${session_id}) / ${message_data}, error => ${error}`)}}function broadcast_msg(req,msg){cs["kh-wss"].broadcast_msg(req,msg,((cur_session_data,from_session_data)=>{if(cur_session_data.eventYear!=from_session_data.eventYear)return false;return true}))}function refresh_view(sid){if(!cs.sessionData.has(sid))return;const enumSocket=ms.enumSocket;const session_data=cs.sessionData.get(sid);let send_data={[enumSocket.attr_msg_type_]:enumSocket.mt_app_status_,[enumSocket.attr_msg_sub_type_]:enumSocket.mt_refresh_view_,[enumSocket.attr_value_]:"full"};session_data?.ws?.send(JSON.stringify(send_data))}function testUpgrade(){for(let[sid,session_data]of cs.sessionData.entries()){if("true"===session_data.upgradeCandidate){kh_log.debug?.(T9`access rights upgrade possible for ${session_data["ws"]?.name()}`);return refresh_view(sid)}}kh_log.debug?.(`no suited candidate found for access rights upgrade`)}function testDowngrade(){for(let[sid,session_data]of cs.sessionData.entries()){if("writer"==session_data.userRole){kh_log.debug?.(T9`access rights downgrade processed for ${session_data["ws"]?.name()||"dead client"}`);return!kh_js.isValid(session_data["ws"])?cs.sessionData.delete(sid):refresh_view(sid)}}kh_log.debug?.(`no suited candidate found for access rights downgrade`)}function on_ws_close(ws,session_id,event_or_reason,data){kh_log.info?.(T9`${ws.name()} should closed ${session_id} | ${data?.toString()||(event_or_reason?.reason??event_or_reason)||"unknown reason"}`);const session_data=cs.sessionData.get(session_id);if("writer"===session_data?.userRole)testUpgrade();cs.sessionData.delete(session_id)}function on_ws_error(ws,session_id,event){kh_log.info?.(T9`ws closed thru error ${session_id} ${event}`)}kh_global.LoadedScripts.get(mf).resolve(ms)})).catch((error=>{(kh_global.kh_log??console).error?.(`error during start server => ${error}`)}))}})();